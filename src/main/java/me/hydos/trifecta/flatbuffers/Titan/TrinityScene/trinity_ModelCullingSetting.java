// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_ModelCullingSetting extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_ModelCullingSetting getRootAstrinity_ModelCullingSetting(ByteBuffer _bb) { return getRootAstrinity_ModelCullingSetting(_bb, new trinity_ModelCullingSetting()); }
  public static trinity_ModelCullingSetting getRootAstrinity_ModelCullingSetting(ByteBuffer _bb, trinity_ModelCullingSetting obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_ModelCullingSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String unk0() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk0AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer unk0InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String modelFilePath() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modelFilePathAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer modelFilePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public float unk2() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long unk3(int j) { int o = __offset(10); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int unk3Length() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public IntVector unk3Vector() { return unk3Vector(new IntVector()); }
  public IntVector unk3Vector(IntVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer unk3AsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer unk3InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }

  public static int createtrinity_ModelCullingSetting(FlatBufferBuilder builder,
      int unk0Offset,
      int modelFilePathOffset,
      float unk2,
      int unk3Offset) {
    builder.startTable(4);
    trinity_ModelCullingSetting.addUnk3(builder, unk3Offset);
    trinity_ModelCullingSetting.addUnk2(builder, unk2);
    trinity_ModelCullingSetting.addModelFilePath(builder, modelFilePathOffset);
    trinity_ModelCullingSetting.addUnk0(builder, unk0Offset);
    return trinity_ModelCullingSetting.endtrinity_ModelCullingSetting(builder);
  }

  public static void starttrinity_ModelCullingSetting(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addUnk0(FlatBufferBuilder builder, int unk0Offset) { builder.addOffset(0, unk0Offset, 0); }
  public static void addModelFilePath(FlatBufferBuilder builder, int modelFilePathOffset) { builder.addOffset(1, modelFilePathOffset, 0); }
  public static void addUnk2(FlatBufferBuilder builder, float unk2) { builder.addFloat(2, unk2, 0.0f); }
  public static void addUnk3(FlatBufferBuilder builder, int unk3Offset) { builder.addOffset(3, unk3Offset, 0); }
  public static int createUnk3Vector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startUnk3Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endtrinity_ModelCullingSetting(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_ModelCullingSettingBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_ModelCullingSettingBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_ModelCullingSetting get(int j) { return get(new trinity_ModelCullingSetting(), j); }
    public trinity_ModelCullingSetting get(trinity_ModelCullingSetting obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_ModelCullingSettingT unpack() {
    trinity_ModelCullingSettingT _o = new trinity_ModelCullingSettingT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_ModelCullingSettingT _o) {
    String _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    String _oModelFilePath = modelFilePath();
    _o.setModelFilePath(_oModelFilePath);
    float _oUnk2 = unk2();
    _o.setUnk2(_oUnk2);
    long[] _oUnk3 = new long[unk3Length()];
    for (int _j = 0; _j < unk3Length(); ++_j) {_oUnk3[_j] = unk3(_j);}
    _o.setUnk3(_oUnk3);
  }
  public static int pack(FlatBufferBuilder builder, trinity_ModelCullingSettingT _o) {
    if (_o == null) return 0;
    int _unk0 = _o.getUnk0() == null ? 0 : builder.createString(_o.getUnk0());
    int _modelFilePath = _o.getModelFilePath() == null ? 0 : builder.createString(_o.getModelFilePath());
    int _unk3 = 0;
    if (_o.getUnk3() != null) {
      _unk3 = createUnk3Vector(builder, _o.getUnk3());
    }
    return createtrinity_ModelCullingSetting(
      builder,
      _unk0,
      _modelFilePath,
      _o.getUnk2(),
      _unk3);
  }
}

