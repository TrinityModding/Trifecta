// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Texture extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Texture getRootAsTexture(ByteBuffer _bb) { return getRootAsTexture(_bb, new Texture()); }
  public static Texture getRootAsTexture(ByteBuffer _bb, Texture obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Texture __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String textureName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textureNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer textureNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String textureFile() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textureFileAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer textureFileInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public long textureSlot() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createTexture(FlatBufferBuilder builder,
      int textureNameOffset,
      int textureFileOffset,
      long textureSlot) {
    builder.startTable(3);
    Texture.addTextureSlot(builder, textureSlot);
    Texture.addTextureFile(builder, textureFileOffset);
    Texture.addTextureName(builder, textureNameOffset);
    return Texture.endTexture(builder);
  }

  public static void startTexture(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addTextureName(FlatBufferBuilder builder, int textureNameOffset) { builder.addOffset(0, textureNameOffset, 0); }
  public static void addTextureFile(FlatBufferBuilder builder, int textureFileOffset) { builder.addOffset(1, textureFileOffset, 0); }
  public static void addTextureSlot(FlatBufferBuilder builder, long textureSlot) { builder.addInt(2, (int) textureSlot, (int) 0L); }
  public static int endTexture(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Texture get(int j) { return get(new Texture(), j); }
    public Texture get(Texture obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TextureT unpack() {
    TextureT _o = new TextureT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TextureT _o) {
    String _oTextureName = textureName();
    _o.setTextureName(_oTextureName);
    String _oTextureFile = textureFile();
    _o.setTextureFile(_oTextureFile);
    long _oTextureSlot = textureSlot();
    _o.setTextureSlot(_oTextureSlot);
  }
  public static int pack(FlatBufferBuilder builder, TextureT _o) {
    if (_o == null) return 0;
    int _textureName = _o.getTextureName() == null ? 0 : builder.createString(_o.getTextureName());
    int _textureFile = _o.getTextureFile() == null ? 0 : builder.createString(_o.getTextureFile());
    return createTexture(
      builder,
      _textureName,
      _textureFile,
      _o.getTextureSlot());
  }
}

