// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class trinity_ScenePointT {
  private String pointName;
  private me.hydos.trifecta.flatbuffers.Vec3fT pointLocation;
  private int pointUnk;

  public String getPointName() { return pointName; }

  public void setPointName(String pointName) { this.pointName = pointName; }

  public me.hydos.trifecta.flatbuffers.Vec3fT getPointLocation() { return pointLocation; }

  public void setPointLocation(me.hydos.trifecta.flatbuffers.Vec3fT pointLocation) { this.pointLocation = pointLocation; }

  public int getPointUnk() { return pointUnk; }

  public void setPointUnk(int pointUnk) { this.pointUnk = pointUnk; }


  public trinity_ScenePointT() {
    this.pointName = null;
    this.pointLocation = new me.hydos.trifecta.flatbuffers.Vec3fT();
    this.pointUnk = 0;
  }
  public static trinity_ScenePointT deserializeFromBinary(byte[] fbBuffer) {
    return trinity_ScenePoint.getRootAstrinity_ScenePoint(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    trinity_ScenePoint.finishtrinity_ScenePointBuffer(fbb, trinity_ScenePoint.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

