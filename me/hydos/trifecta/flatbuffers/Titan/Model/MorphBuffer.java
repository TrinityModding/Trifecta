// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MorphBuffer extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static MorphBuffer getRootAsMorphBuffer(ByteBuffer _bb) { return getRootAsMorphBuffer(_bb, new MorphBuffer()); }
  public static MorphBuffer getRootAsMorphBuffer(ByteBuffer _bb, MorphBuffer obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MorphBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int buffer(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int bufferLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bufferVector() { return bufferVector(new ByteVector()); }
  public ByteVector bufferVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bufferAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer bufferInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createMorphBuffer(FlatBufferBuilder builder,
      int bufferOffset) {
    builder.startTable(1);
    MorphBuffer.addBuffer(builder, bufferOffset);
    return MorphBuffer.endMorphBuffer(builder);
  }

  public static void startMorphBuffer(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addBuffer(FlatBufferBuilder builder, int bufferOffset) { builder.addOffset(0, bufferOffset, 0); }
  public static int createBufferVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBufferVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endMorphBuffer(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MorphBuffer get(int j) { return get(new MorphBuffer(), j); }
    public MorphBuffer get(MorphBuffer obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MorphBufferT unpack() {
    MorphBufferT _o = new MorphBufferT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MorphBufferT _o) {
    int[] _oBuffer = new int[bufferLength()];
    for (int _j = 0; _j < bufferLength(); ++_j) {_oBuffer[_j] = buffer(_j);}
    _o.setBuffer(_oBuffer);
  }
  public static int pack(FlatBufferBuilder builder, MorphBufferT _o) {
    if (_o == null) return 0;
    int _buffer = 0;
    if (_o.getBuffer() != null) {
      byte[] __buffer = new byte[_o.getBuffer().length];
      int _j = 0;
      for (int _e : _o.getBuffer()) { __buffer[_j] = (byte) _e; _j++;}
      _buffer = createBufferVector(builder, __buffer);
    }
    return createMorphBuffer(
      builder,
      _buffer);
  }
}

