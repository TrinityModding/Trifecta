// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class trinity_TerrainTreeTemplateT {
  private long unk0;
  private String templateFilePath;

  public long getUnk0() { return unk0; }

  public void setUnk0(long unk0) { this.unk0 = unk0; }

  public String getTemplateFilePath() { return templateFilePath; }

  public void setTemplateFilePath(String templateFilePath) { this.templateFilePath = templateFilePath; }


  public trinity_TerrainTreeTemplateT() {
    this.unk0 = 0L;
    this.templateFilePath = null;
  }
  public static trinity_TerrainTreeTemplateT deserializeFromBinary(byte[] fbBuffer) {
    return trinity_TerrainTreeTemplate.getRootAstrinity_TerrainTreeTemplate(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    trinity_TerrainTreeTemplate.finishtrinity_TerrainTreeTemplateBuffer(fbb, trinity_TerrainTreeTemplate.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

