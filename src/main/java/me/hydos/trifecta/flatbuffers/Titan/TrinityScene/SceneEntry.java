// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SceneEntry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static SceneEntry getRootAsSceneEntry(ByteBuffer _bb) { return getRootAsSceneEntry(_bb, new SceneEntry()); }
  public static SceneEntry getRootAsSceneEntry(ByteBuffer _bb, SceneEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SceneEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String typeName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer typeNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int nestedType(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int nestedTypeLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector nestedTypeVector() { return nestedTypeVector(new ByteVector()); }
  public ByteVector nestedTypeVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer nestedTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nestedTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry subObjects(int j) { return subObjects(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry subObjects(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int subObjectsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry.Vector subObjectsVector() { return subObjectsVector(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry.Vector subObjectsVector(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSceneEntry(FlatBufferBuilder builder,
      int typeNameOffset,
      int nestedTypeOffset,
      int subObjectsOffset) {
    builder.startTable(3);
    SceneEntry.addSubObjects(builder, subObjectsOffset);
    SceneEntry.addNestedType(builder, nestedTypeOffset);
    SceneEntry.addTypeName(builder, typeNameOffset);
    return SceneEntry.endSceneEntry(builder);
  }

  public static void startSceneEntry(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addTypeName(FlatBufferBuilder builder, int typeNameOffset) { builder.addOffset(0, typeNameOffset, 0); }
  public static void addNestedType(FlatBufferBuilder builder, int nestedTypeOffset) { builder.addOffset(1, nestedTypeOffset, 0); }
  public static int createNestedTypeVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createNestedTypeVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startNestedTypeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addSubObjects(FlatBufferBuilder builder, int subObjectsOffset) { builder.addOffset(2, subObjectsOffset, 0); }
  public static int createSubObjectsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSubObjectsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSceneEntry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SceneEntry get(int j) { return get(new SceneEntry(), j); }
    public SceneEntry get(SceneEntry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SceneEntryT unpack() {
    SceneEntryT _o = new SceneEntryT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SceneEntryT _o) {
    String _oTypeName = typeName();
    _o.setTypeName(_oTypeName);

    int[] _oNestedType = new int[nestedTypeLength()];
    for (int _j = 0; _j < nestedTypeLength(); ++_j) {_oNestedType[_j] = nestedType(_j);}
    _o.setNestedType(_oNestedType);
    me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntryT[] _oSubObjects = new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntryT[subObjectsLength()];
    for (int _j = 0; _j < subObjectsLength(); ++_j) {_oSubObjects[_j] = (subObjects(_j) != null ? subObjects(_j).unpack() : null);}
    _o.setSubObjects(_oSubObjects);
  }
  public static int pack(FlatBufferBuilder builder, SceneEntryT _o) {
    if (_o == null) return 0;
    int _typeName = _o.getTypeName() == null ? 0 : builder.createString(_o.getTypeName());
    int _nestedType = 0;
    if (_o.getNestedType() != null) {
      byte[] __nestedType = new byte[_o.getNestedType().length];
      int _j = 0;
      for (int _e : _o.getNestedType()) { __nestedType[_j] = (byte) _e; _j++;}
      _nestedType = createNestedTypeVector(builder, __nestedType);
    }
    int _subObjects = 0;
    if (_o.getSubObjects() != null) {
      int[] __subObjects = new int[_o.getSubObjects().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntryT _e : _o.getSubObjects()) { __subObjects[_j] = me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SceneEntry.pack(builder, _e); _j++;}
      _subObjects = createSubObjectsVector(builder, __subObjects);
    }
    return createSceneEntry(
      builder,
      _typeName,
      _nestedType,
      _subObjects);
  }
}

