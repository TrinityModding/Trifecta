// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class TRMDLT {
  private long unk0;
  private me.hydos.trifecta.flatbuffers.Titan.Model.trmeshesT[] meshes;
  private me.hydos.trifecta.flatbuffers.Titan.Model.trskeletonT skeleton;
  private String[] materials;
  private me.hydos.trifecta.flatbuffers.Titan.Model.LodT[] lods;
  private me.hydos.trifecta.flatbuffers.Titan.Model.BoundsT bounds;
  private me.hydos.trifecta.flatbuffers.Titan.Model.Vec4T unkVec;
  private long unk7;
  private long unk8;
  private long unk9;

  public long getUnk0() { return unk0; }

  public void setUnk0(long unk0) { this.unk0 = unk0; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.trmeshesT[] getMeshes() { return meshes; }

  public void setMeshes(me.hydos.trifecta.flatbuffers.Titan.Model.trmeshesT[] meshes) { this.meshes = meshes; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.trskeletonT getSkeleton() { return skeleton; }

  public void setSkeleton(me.hydos.trifecta.flatbuffers.Titan.Model.trskeletonT skeleton) { this.skeleton = skeleton; }

  public String[] getMaterials() { return materials; }

  public void setMaterials(String[] materials) { this.materials = materials; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.LodT[] getLods() { return lods; }

  public void setLods(me.hydos.trifecta.flatbuffers.Titan.Model.LodT[] lods) { this.lods = lods; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.BoundsT getBounds() { return bounds; }

  public void setBounds(me.hydos.trifecta.flatbuffers.Titan.Model.BoundsT bounds) { this.bounds = bounds; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.Vec4T getUnkVec() { return unkVec; }

  public void setUnkVec(me.hydos.trifecta.flatbuffers.Titan.Model.Vec4T unkVec) { this.unkVec = unkVec; }

  public long getUnk7() { return unk7; }

  public void setUnk7(long unk7) { this.unk7 = unk7; }

  public long getUnk8() { return unk8; }

  public void setUnk8(long unk8) { this.unk8 = unk8; }

  public long getUnk9() { return unk9; }

  public void setUnk9(long unk9) { this.unk9 = unk9; }


  public TRMDLT() {
    this.unk0 = 0L;
    this.meshes = null;
    this.skeleton = null;
    this.materials = null;
    this.lods = null;
    this.bounds = null;
    this.unkVec = new me.hydos.trifecta.flatbuffers.Titan.Model.Vec4T();
    this.unk7 = 0L;
    this.unk8 = 0L;
    this.unk9 = 0L;
  }
  public static TRMDLT deserializeFromBinary(byte[] fbBuffer) {
    return TRMDL.getRootAsTRMDL(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    TRMDL.finishTRMDLBuffer(fbb, TRMDL.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

