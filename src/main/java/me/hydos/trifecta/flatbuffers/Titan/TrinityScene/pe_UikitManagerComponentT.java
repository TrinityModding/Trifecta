// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class pe_UikitManagerComponentT {
  private String filepath;
  private long unk1;
  private long unk2;
  private me.hydos.trifecta.flatbuffers.Titan.TrinityScene.umc_data_1T[] unk3;
  private me.hydos.trifecta.flatbuffers.Titan.TrinityScene.umc_data_2T[] unk4;

  public String getFilepath() { return filepath; }

  public void setFilepath(String filepath) { this.filepath = filepath; }

  public long getUnk1() { return unk1; }

  public void setUnk1(long unk1) { this.unk1 = unk1; }

  public long getUnk2() { return unk2; }

  public void setUnk2(long unk2) { this.unk2 = unk2; }

  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.umc_data_1T[] getUnk3() { return unk3; }

  public void setUnk3(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.umc_data_1T[] unk3) { this.unk3 = unk3; }

  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.umc_data_2T[] getUnk4() { return unk4; }

  public void setUnk4(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.umc_data_2T[] unk4) { this.unk4 = unk4; }


  public pe_UikitManagerComponentT() {
    this.filepath = null;
    this.unk1 = 0L;
    this.unk2 = 0L;
    this.unk3 = null;
    this.unk4 = null;
  }
  public static pe_UikitManagerComponentT deserializeFromBinary(byte[] fbBuffer) {
    return pe_UikitManagerComponent.getRootAspe_UikitManagerComponent(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    pe_UikitManagerComponent.finishpe_UikitManagerComponentBuffer(fbb, pe_UikitManagerComponent.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

