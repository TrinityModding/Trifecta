// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_TerrainEntity extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_TerrainEntity getRootAstrinity_TerrainEntity(ByteBuffer _bb) { return getRootAstrinity_TerrainEntity(_bb, new trinity_TerrainEntity()); }
  public static trinity_TerrainEntity getRootAstrinity_TerrainEntity(ByteBuffer _bb, trinity_TerrainEntity obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_TerrainEntity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public float filePath() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean unk2() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public long unk3() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public float unk4() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public String materialLowFilePath() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer materialLowFilePathAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer materialLowFilePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public String materialMidFilePath() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer materialMidFilePathAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer materialMidFilePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public String materialFilePath() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer materialFilePathAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer materialFilePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  public long unk8(int j) { int o = __offset(20); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int unk8Length() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public IntVector unk8Vector() { return unk8Vector(new IntVector()); }
  public IntVector unk8Vector(IntVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer unk8AsByteBuffer() { return __vector_as_bytebuffer(20, 4); }
  public ByteBuffer unk8InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 4); }
  public boolean unk9() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public float unk10() { int o = __offset(24); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk11() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk12() { int o = __offset(28); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public String unk13(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int unk13Length() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector unk13Vector() { return unk13Vector(new StringVector()); }
  public StringVector unk13Vector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public boolean unk14() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }

  public static int createtrinity_TerrainEntity(FlatBufferBuilder builder,
      int nameOffset,
      float filePath,
      boolean unk2,
      long unk3,
      float unk4,
      int materialLowFilePathOffset,
      int materialMidFilePathOffset,
      int materialFilePathOffset,
      int unk8Offset,
      boolean unk9,
      float unk10,
      float unk11,
      float unk12,
      int unk13Offset,
      boolean unk14) {
    builder.startTable(15);
    trinity_TerrainEntity.addUnk13(builder, unk13Offset);
    trinity_TerrainEntity.addUnk12(builder, unk12);
    trinity_TerrainEntity.addUnk11(builder, unk11);
    trinity_TerrainEntity.addUnk10(builder, unk10);
    trinity_TerrainEntity.addUnk8(builder, unk8Offset);
    trinity_TerrainEntity.addMaterialFilePath(builder, materialFilePathOffset);
    trinity_TerrainEntity.addMaterialMidFilePath(builder, materialMidFilePathOffset);
    trinity_TerrainEntity.addMaterialLowFilePath(builder, materialLowFilePathOffset);
    trinity_TerrainEntity.addUnk4(builder, unk4);
    trinity_TerrainEntity.addUnk3(builder, unk3);
    trinity_TerrainEntity.addFilePath(builder, filePath);
    trinity_TerrainEntity.addName(builder, nameOffset);
    trinity_TerrainEntity.addUnk14(builder, unk14);
    trinity_TerrainEntity.addUnk9(builder, unk9);
    trinity_TerrainEntity.addUnk2(builder, unk2);
    return trinity_TerrainEntity.endtrinity_TerrainEntity(builder);
  }

  public static void starttrinity_TerrainEntity(FlatBufferBuilder builder) { builder.startTable(15); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addFilePath(FlatBufferBuilder builder, float filePath) { builder.addFloat(1, filePath, 0.0f); }
  public static void addUnk2(FlatBufferBuilder builder, boolean unk2) { builder.addBoolean(2, unk2, false); }
  public static void addUnk3(FlatBufferBuilder builder, long unk3) { builder.addInt(3, (int) unk3, (int) 0L); }
  public static void addUnk4(FlatBufferBuilder builder, float unk4) { builder.addFloat(4, unk4, 0.0f); }
  public static void addMaterialLowFilePath(FlatBufferBuilder builder, int materialLowFilePathOffset) { builder.addOffset(5, materialLowFilePathOffset, 0); }
  public static void addMaterialMidFilePath(FlatBufferBuilder builder, int materialMidFilePathOffset) { builder.addOffset(6, materialMidFilePathOffset, 0); }
  public static void addMaterialFilePath(FlatBufferBuilder builder, int materialFilePathOffset) { builder.addOffset(7, materialFilePathOffset, 0); }
  public static void addUnk8(FlatBufferBuilder builder, int unk8Offset) { builder.addOffset(8, unk8Offset, 0); }
  public static int createUnk8Vector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startUnk8Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk9(FlatBufferBuilder builder, boolean unk9) { builder.addBoolean(9, unk9, false); }
  public static void addUnk10(FlatBufferBuilder builder, float unk10) { builder.addFloat(10, unk10, 0.0f); }
  public static void addUnk11(FlatBufferBuilder builder, float unk11) { builder.addFloat(11, unk11, 0.0f); }
  public static void addUnk12(FlatBufferBuilder builder, float unk12) { builder.addFloat(12, unk12, 0.0f); }
  public static void addUnk13(FlatBufferBuilder builder, int unk13Offset) { builder.addOffset(13, unk13Offset, 0); }
  public static int createUnk13Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUnk13Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk14(FlatBufferBuilder builder, boolean unk14) { builder.addBoolean(14, unk14, true); }
  public static int endtrinity_TerrainEntity(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_TerrainEntityBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_TerrainEntityBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_TerrainEntity get(int j) { return get(new trinity_TerrainEntity(), j); }
    public trinity_TerrainEntity get(trinity_TerrainEntity obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_TerrainEntityT unpack() {
    trinity_TerrainEntityT _o = new trinity_TerrainEntityT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_TerrainEntityT _o) {
    String _oName = name();
    _o.setName(_oName);
    float _oFilePath = filePath();
    _o.setFilePath(_oFilePath);
    boolean _oUnk2 = unk2();
    _o.setUnk2(_oUnk2);
    long _oUnk3 = unk3();
    _o.setUnk3(_oUnk3);
    float _oUnk4 = unk4();
    _o.setUnk4(_oUnk4);
    String _oMaterialLowFilePath = materialLowFilePath();
    _o.setMaterialLowFilePath(_oMaterialLowFilePath);
    String _oMaterialMidFilePath = materialMidFilePath();
    _o.setMaterialMidFilePath(_oMaterialMidFilePath);
    String _oMaterialFilePath = materialFilePath();
    _o.setMaterialFilePath(_oMaterialFilePath);
    long[] _oUnk8 = new long[unk8Length()];
    for (int _j = 0; _j < unk8Length(); ++_j) {_oUnk8[_j] = unk8(_j);}
    _o.setUnk8(_oUnk8);
    boolean _oUnk9 = unk9();
    _o.setUnk9(_oUnk9);
    float _oUnk10 = unk10();
    _o.setUnk10(_oUnk10);
    float _oUnk11 = unk11();
    _o.setUnk11(_oUnk11);
    float _oUnk12 = unk12();
    _o.setUnk12(_oUnk12);
    String[] _oUnk13 = new String[unk13Length()];
    for (int _j = 0; _j < unk13Length(); ++_j) {_oUnk13[_j] = unk13(_j);}
    _o.setUnk13(_oUnk13);
    boolean _oUnk14 = unk14();
    _o.setUnk14(_oUnk14);
  }
  public static int pack(FlatBufferBuilder builder, trinity_TerrainEntityT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _materialLowFilePath = _o.getMaterialLowFilePath() == null ? 0 : builder.createString(_o.getMaterialLowFilePath());
    int _materialMidFilePath = _o.getMaterialMidFilePath() == null ? 0 : builder.createString(_o.getMaterialMidFilePath());
    int _materialFilePath = _o.getMaterialFilePath() == null ? 0 : builder.createString(_o.getMaterialFilePath());
    int _unk8 = 0;
    if (_o.getUnk8() != null) {
      _unk8 = createUnk8Vector(builder, _o.getUnk8());
    }
    int _unk13 = 0;
    if (_o.getUnk13() != null) {
      int[] __unk13 = new int[_o.getUnk13().length];
      int _j = 0;
      for (String _e : _o.getUnk13()) { __unk13[_j] = builder.createString(_e); _j++;}
      _unk13 = createUnk13Vector(builder, __unk13);
    }
    return createtrinity_TerrainEntity(
      builder,
      _name,
      _o.getFilePath(),
      _o.getUnk2(),
      _o.getUnk3(),
      _o.getUnk4(),
      _materialLowFilePath,
      _materialMidFilePath,
      _materialFilePath,
      _unk8,
      _o.getUnk9(),
      _o.getUnk10(),
      _o.getUnk11(),
      _o.getUnk12(),
      _unk13,
      _o.getUnk14());
  }
}

