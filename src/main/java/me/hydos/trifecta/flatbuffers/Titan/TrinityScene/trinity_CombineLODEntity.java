// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_CombineLODEntity extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_CombineLODEntity getRootAstrinity_CombineLODEntity(ByteBuffer _bb) { return getRootAstrinity_CombineLODEntity(_bb, new trinity_CombineLODEntity()); }
  public static trinity_CombineLODEntity getRootAstrinity_CombineLODEntity(ByteBuffer _bb, trinity_CombineLODEntity obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_CombineLODEntity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String unk0() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk0AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer unk0InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long unk1() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String unk2(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int unk2Length() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector unk2Vector() { return unk2Vector(new StringVector()); }
  public StringVector unk2Vector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Vec3f unk3() { return unk3(new me.hydos.trifecta.flatbuffers.Vec3f()); }
  public me.hydos.trifecta.flatbuffers.Vec3f unk3(me.hydos.trifecta.flatbuffers.Vec3f obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public float unk4() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk5() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long unk6() { int o = __offset(16); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long unk7() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity unk8(int j) { return unk8(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity unk8(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity obj, int j) { int o = __offset(20); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int unk8Length() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity.Vector unk8Vector() { return unk8Vector(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity.Vector unk8Vector(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity.Vector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static void starttrinity_CombineLODEntity(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addUnk0(FlatBufferBuilder builder, int unk0Offset) { builder.addOffset(0, unk0Offset, 0); }
  public static void addUnk1(FlatBufferBuilder builder, long unk1) { builder.addInt(1, (int) unk1, (int) 0L); }
  public static void addUnk2(FlatBufferBuilder builder, int unk2Offset) { builder.addOffset(2, unk2Offset, 0); }
  public static int createUnk2Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUnk2Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk3(FlatBufferBuilder builder, int unk3Offset) { builder.addStruct(3, unk3Offset, 0); }
  public static void addUnk4(FlatBufferBuilder builder, float unk4) { builder.addFloat(4, unk4, 0.0f); }
  public static void addUnk5(FlatBufferBuilder builder, float unk5) { builder.addFloat(5, unk5, 0.0f); }
  public static void addUnk6(FlatBufferBuilder builder, long unk6) { builder.addInt(6, (int) unk6, (int) 0L); }
  public static void addUnk7(FlatBufferBuilder builder, long unk7) { builder.addInt(7, (int) unk7, (int) 0L); }
  public static void addUnk8(FlatBufferBuilder builder, int unk8Offset) { builder.addOffset(8, unk8Offset, 0); }
  public static int createUnk8Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUnk8Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endtrinity_CombineLODEntity(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_CombineLODEntityBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_CombineLODEntityBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_CombineLODEntity get(int j) { return get(new trinity_CombineLODEntity(), j); }
    public trinity_CombineLODEntity get(trinity_CombineLODEntity obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_CombineLODEntityT unpack() {
    trinity_CombineLODEntityT _o = new trinity_CombineLODEntityT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_CombineLODEntityT _o) {
    String _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    long _oUnk1 = unk1();
    _o.setUnk1(_oUnk1);
    String[] _oUnk2 = new String[unk2Length()];
    for (int _j = 0; _j < unk2Length(); ++_j) {_oUnk2[_j] = unk2(_j);}
    _o.setUnk2(_oUnk2);
    if (unk3() != null) unk3().unpackTo(_o.getUnk3());
    else _o.setUnk3(null);
    float _oUnk4 = unk4();
    _o.setUnk4(_oUnk4);
    float _oUnk5 = unk5();
    _o.setUnk5(_oUnk5);
    long _oUnk6 = unk6();
    _o.setUnk6(_oUnk6);
    long _oUnk7 = unk7();
    _o.setUnk7(_oUnk7);
    me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntityT[] _oUnk8 = new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntityT[unk8Length()];
    for (int _j = 0; _j < unk8Length(); ++_j) {_oUnk8[_j] = (unk8(_j) != null ? unk8(_j).unpack() : null);}
    _o.setUnk8(_oUnk8);
  }
  public static int pack(FlatBufferBuilder builder, trinity_CombineLODEntityT _o) {
    if (_o == null) return 0;
    int _unk0 = _o.getUnk0() == null ? 0 : builder.createString(_o.getUnk0());
    int _unk2 = 0;
    if (_o.getUnk2() != null) {
      int[] __unk2 = new int[_o.getUnk2().length];
      int _j = 0;
      for (String _e : _o.getUnk2()) { __unk2[_j] = builder.createString(_e); _j++;}
      _unk2 = createUnk2Vector(builder, __unk2);
    }
    int _unk8 = 0;
    if (_o.getUnk8() != null) {
      int[] __unk8 = new int[_o.getUnk8().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntityT _e : _o.getUnk8()) { __unk8[_j] = me.hydos.trifecta.flatbuffers.Titan.TrinityScene.LODEntity.pack(builder, _e); _j++;}
      _unk8 = createUnk8Vector(builder, __unk8);
    }
    starttrinity_CombineLODEntity(builder);
    addUnk0(builder, _unk0);
    addUnk1(builder, _o.getUnk1());
    addUnk2(builder, _unk2);
    addUnk3(builder, me.hydos.trifecta.flatbuffers.Vec3f.pack(builder, _o.getUnk3()));
    addUnk4(builder, _o.getUnk4());
    addUnk5(builder, _o.getUnk5());
    addUnk6(builder, _o.getUnk6());
    addUnk7(builder, _o.getUnk7());
    addUnk8(builder, _unk8);
    return endtrinity_CombineLODEntity(builder);
  }
}

