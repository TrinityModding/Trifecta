// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class pe_WeatherEffect extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static pe_WeatherEffect getRootAspe_WeatherEffect(ByteBuffer _bb) { return getRootAspe_WeatherEffect(_bb, new pe_WeatherEffect()); }
  public static pe_WeatherEffect getRootAspe_WeatherEffect(ByteBuffer _bb, pe_WeatherEffect obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public pe_WeatherEffect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String effectName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer effectNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer effectNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String effectFilePath() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer effectFilePathAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer effectFilePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public me.hydos.trifecta.flatbuffers.Vec3f unk2() { return unk2(new me.hydos.trifecta.flatbuffers.Vec3f()); }
  public me.hydos.trifecta.flatbuffers.Vec3f unk2(me.hydos.trifecta.flatbuffers.Vec3f obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public long unk3() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean unk4() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static void startpe_WeatherEffect(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addEffectName(FlatBufferBuilder builder, int effectNameOffset) { builder.addOffset(0, effectNameOffset, 0); }
  public static void addEffectFilePath(FlatBufferBuilder builder, int effectFilePathOffset) { builder.addOffset(1, effectFilePathOffset, 0); }
  public static void addUnk2(FlatBufferBuilder builder, int unk2Offset) { builder.addStruct(2, unk2Offset, 0); }
  public static void addUnk3(FlatBufferBuilder builder, long unk3) { builder.addInt(3, (int) unk3, (int) 0L); }
  public static void addUnk4(FlatBufferBuilder builder, boolean unk4) { builder.addBoolean(4, unk4, false); }
  public static int endpe_WeatherEffect(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishpe_WeatherEffectBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedpe_WeatherEffectBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public pe_WeatherEffect get(int j) { return get(new pe_WeatherEffect(), j); }
    public pe_WeatherEffect get(pe_WeatherEffect obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public pe_WeatherEffectT unpack() {
    pe_WeatherEffectT _o = new pe_WeatherEffectT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(pe_WeatherEffectT _o) {
    String _oEffectName = effectName();
    _o.setEffectName(_oEffectName);
    String _oEffectFilePath = effectFilePath();
    _o.setEffectFilePath(_oEffectFilePath);
    if (unk2() != null) unk2().unpackTo(_o.getUnk2());
    else _o.setUnk2(null);
    long _oUnk3 = unk3();
    _o.setUnk3(_oUnk3);
    boolean _oUnk4 = unk4();
    _o.setUnk4(_oUnk4);
  }
  public static int pack(FlatBufferBuilder builder, pe_WeatherEffectT _o) {
    if (_o == null) return 0;
    int _effectName = _o.getEffectName() == null ? 0 : builder.createString(_o.getEffectName());
    int _effectFilePath = _o.getEffectFilePath() == null ? 0 : builder.createString(_o.getEffectFilePath());
    startpe_WeatherEffect(builder);
    addEffectName(builder, _effectName);
    addEffectFilePath(builder, _effectFilePath);
    addUnk2(builder, me.hydos.trifecta.flatbuffers.Vec3f.pack(builder, _o.getUnk2()));
    addUnk3(builder, _o.getUnk3());
    addUnk4(builder, _o.getUnk4());
    return endpe_WeatherEffect(builder);
  }
}

