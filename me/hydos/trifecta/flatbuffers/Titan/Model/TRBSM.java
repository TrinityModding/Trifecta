// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRBSM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static TRBSM getRootAsTRBSM(ByteBuffer _bb) { return getRootAsTRBSM(_bb, new TRBSM()); }
  public static TRBSM getRootAsTRBSM(ByteBuffer _bb, TRBSM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRBSM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry bones(int j) { return bones(new me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry bones(me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int bonesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry.Vector bonesVector() { return bonesVector(new me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry.Vector bonesVector(me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry scalers(int j) { return scalers(new me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry scalers(me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int scalersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry.Vector scalersVector() { return scalersVector(new me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry.Vector scalersVector(me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry mesh(int j) { return mesh(new me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry mesh(me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int meshLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry.Vector meshVector() { return meshVector(new me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry.Vector meshVector(me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.UnkEntry unk() { return unk(new me.hydos.trifecta.flatbuffers.Titan.Model.UnkEntry()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.UnkEntry unk(me.hydos.trifecta.flatbuffers.Titan.Model.UnkEntry obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTRBSM(FlatBufferBuilder builder,
      int bonesOffset,
      int scalersOffset,
      int meshOffset,
      int unkOffset) {
    builder.startTable(4);
    TRBSM.addUnk(builder, unkOffset);
    TRBSM.addMesh(builder, meshOffset);
    TRBSM.addScalers(builder, scalersOffset);
    TRBSM.addBones(builder, bonesOffset);
    return TRBSM.endTRBSM(builder);
  }

  public static void startTRBSM(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addBones(FlatBufferBuilder builder, int bonesOffset) { builder.addOffset(0, bonesOffset, 0); }
  public static int createBonesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBonesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addScalers(FlatBufferBuilder builder, int scalersOffset) { builder.addOffset(1, scalersOffset, 0); }
  public static int createScalersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startScalersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMesh(FlatBufferBuilder builder, int meshOffset) { builder.addOffset(2, meshOffset, 0); }
  public static int createMeshVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMeshVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk(FlatBufferBuilder builder, int unkOffset) { builder.addOffset(3, unkOffset, 0); }
  public static int endTRBSM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRBSMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRBSMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRBSM get(int j) { return get(new TRBSM(), j); }
    public TRBSM get(TRBSM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TRBSMT unpack() {
    TRBSMT _o = new TRBSMT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TRBSMT _o) {
    me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntryT[] _oBones = new me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntryT[bonesLength()];
    for (int _j = 0; _j < bonesLength(); ++_j) {_oBones[_j] = (bones(_j) != null ? bones(_j).unpack() : null);}
    _o.setBones(_oBones);
    me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntryT[] _oScalers = new me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntryT[scalersLength()];
    for (int _j = 0; _j < scalersLength(); ++_j) {_oScalers[_j] = (scalers(_j) != null ? scalers(_j).unpack() : null);}
    _o.setScalers(_oScalers);
    me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntryT[] _oMesh = new me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntryT[meshLength()];
    for (int _j = 0; _j < meshLength(); ++_j) {_oMesh[_j] = (mesh(_j) != null ? mesh(_j).unpack() : null);}
    _o.setMesh(_oMesh);
    if (unk() != null) _o.setUnk(unk().unpack());
    else _o.setUnk(null);
  }
  public static int pack(FlatBufferBuilder builder, TRBSMT _o) {
    if (_o == null) return 0;
    int _bones = 0;
    if (_o.getBones() != null) {
      int[] __bones = new int[_o.getBones().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntryT _e : _o.getBones()) { __bones[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntry.pack(builder, _e); _j++;}
      _bones = createBonesVector(builder, __bones);
    }
    int _scalers = 0;
    if (_o.getScalers() != null) {
      int[] __scalers = new int[_o.getScalers().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntryT _e : _o.getScalers()) { __scalers[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntry.pack(builder, _e); _j++;}
      _scalers = createScalersVector(builder, __scalers);
    }
    int _mesh = 0;
    if (_o.getMesh() != null) {
      int[] __mesh = new int[_o.getMesh().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntryT _e : _o.getMesh()) { __mesh[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntry.pack(builder, _e); _j++;}
      _mesh = createMeshVector(builder, __mesh);
    }
    int _unk = _o.getUnk() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.Model.UnkEntry.pack(builder, _o.getUnk());
    return createTRBSM(
      builder,
      _bones,
      _scalers,
      _mesh,
      _unk);
  }
}

