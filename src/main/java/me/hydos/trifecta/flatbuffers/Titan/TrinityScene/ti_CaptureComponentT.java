// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class ti_CaptureComponentT {
  private long unk0;
  private long unk1;

  public long getUnk0() { return unk0; }

  public void setUnk0(long unk0) { this.unk0 = unk0; }

  public long getUnk1() { return unk1; }

  public void setUnk1(long unk1) { this.unk1 = unk1; }


  public ti_CaptureComponentT() {
    this.unk0 = 0L;
    this.unk1 = 0L;
  }
  public static ti_CaptureComponentT deserializeFromBinary(byte[] fbBuffer) {
    return ti_CaptureComponent.getRootAsti_CaptureComponent(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    ti_CaptureComponent.finishti_CaptureComponentBuffer(fbb, ti_CaptureComponent.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

