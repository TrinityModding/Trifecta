// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class additional_SRT_Data extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static additional_SRT_Data getRootAsadditional_SRT_Data(ByteBuffer _bb) { return getRootAsadditional_SRT_Data(_bb, new additional_SRT_Data()); }
  public static additional_SRT_Data getRootAsadditional_SRT_Data(ByteBuffer _bb, additional_SRT_Data obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public additional_SRT_Data __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long unk0() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String nameOfUsedVec3f() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameOfUsedVec3fAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameOfUsedVec3fInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public me.hydos.trifecta.flatbuffers.SRT unk2() { return unk2(new me.hydos.trifecta.flatbuffers.SRT()); }
  public me.hydos.trifecta.flatbuffers.SRT unk2(me.hydos.trifecta.flatbuffers.SRT obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createadditional_SRT_Data(FlatBufferBuilder builder,
      long unk0,
      int nameOfUsedVec3fOffset,
      int unk2Offset) {
    builder.startTable(3);
    additional_SRT_Data.addUnk2(builder, unk2Offset);
    additional_SRT_Data.addNameOfUsedVec3f(builder, nameOfUsedVec3fOffset);
    additional_SRT_Data.addUnk0(builder, unk0);
    return additional_SRT_Data.endadditional_SRT_Data(builder);
  }

  public static void startadditional_SRT_Data(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addUnk0(FlatBufferBuilder builder, long unk0) { builder.addInt(0, (int) unk0, (int) 0L); }
  public static void addNameOfUsedVec3f(FlatBufferBuilder builder, int nameOfUsedVec3fOffset) { builder.addOffset(1, nameOfUsedVec3fOffset, 0); }
  public static void addUnk2(FlatBufferBuilder builder, int unk2Offset) { builder.addOffset(2, unk2Offset, 0); }
  public static int endadditional_SRT_Data(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public additional_SRT_Data get(int j) { return get(new additional_SRT_Data(), j); }
    public additional_SRT_Data get(additional_SRT_Data obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public additional_SRT_DataT unpack() {
    additional_SRT_DataT _o = new additional_SRT_DataT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(additional_SRT_DataT _o) {
    long _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    String _oNameOfUsedVec3f = nameOfUsedVec3f();
    _o.setNameOfUsedVec3f(_oNameOfUsedVec3f);
    if (unk2() != null) _o.setUnk2(unk2().unpack());
    else _o.setUnk2(null);
  }
  public static int pack(FlatBufferBuilder builder, additional_SRT_DataT _o) {
    if (_o == null) return 0;
    int _nameOfUsedVec3f = _o.getNameOfUsedVec3f() == null ? 0 : builder.createString(_o.getNameOfUsedVec3f());
    int _unk2 = _o.getUnk2() == null ? 0 : me.hydos.trifecta.flatbuffers.SRT.pack(builder, _o.getUnk2());
    return createadditional_SRT_Data(
      builder,
      _o.getUnk0(),
      _nameOfUsedVec3f,
      _unk2);
  }
}

