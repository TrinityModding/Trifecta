// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_LightApplierComponent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_LightApplierComponent getRootAstrinity_LightApplierComponent(ByteBuffer _bb) { return getRootAstrinity_LightApplierComponent(_bb, new trinity_LightApplierComponent()); }
  public static trinity_LightApplierComponent getRootAstrinity_LightApplierComponent(ByteBuffer _bb, trinity_LightApplierComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_LightApplierComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String filePath() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filePathAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer filePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long unk1() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public float unk2() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean unk3() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public String unk4() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk4AsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer unk4InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public long unk5() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean unk6() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public long unk7() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean unk8() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean unk9() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createtrinity_LightApplierComponent(FlatBufferBuilder builder,
      int filePathOffset,
      long unk1,
      float unk2,
      boolean unk3,
      int unk4Offset,
      long unk5,
      boolean unk6,
      long unk7,
      boolean unk8,
      boolean unk9) {
    builder.startTable(10);
    trinity_LightApplierComponent.addUnk7(builder, unk7);
    trinity_LightApplierComponent.addUnk5(builder, unk5);
    trinity_LightApplierComponent.addUnk4(builder, unk4Offset);
    trinity_LightApplierComponent.addUnk2(builder, unk2);
    trinity_LightApplierComponent.addUnk1(builder, unk1);
    trinity_LightApplierComponent.addFilePath(builder, filePathOffset);
    trinity_LightApplierComponent.addUnk9(builder, unk9);
    trinity_LightApplierComponent.addUnk8(builder, unk8);
    trinity_LightApplierComponent.addUnk6(builder, unk6);
    trinity_LightApplierComponent.addUnk3(builder, unk3);
    return trinity_LightApplierComponent.endtrinity_LightApplierComponent(builder);
  }

  public static void starttrinity_LightApplierComponent(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addFilePath(FlatBufferBuilder builder, int filePathOffset) { builder.addOffset(0, filePathOffset, 0); }
  public static void addUnk1(FlatBufferBuilder builder, long unk1) { builder.addInt(1, (int) unk1, (int) 0L); }
  public static void addUnk2(FlatBufferBuilder builder, float unk2) { builder.addFloat(2, unk2, 0.0f); }
  public static void addUnk3(FlatBufferBuilder builder, boolean unk3) { builder.addBoolean(3, unk3, false); }
  public static void addUnk4(FlatBufferBuilder builder, int unk4Offset) { builder.addOffset(4, unk4Offset, 0); }
  public static void addUnk5(FlatBufferBuilder builder, long unk5) { builder.addInt(5, (int) unk5, (int) 0L); }
  public static void addUnk6(FlatBufferBuilder builder, boolean unk6) { builder.addBoolean(6, unk6, false); }
  public static void addUnk7(FlatBufferBuilder builder, long unk7) { builder.addInt(7, (int) unk7, (int) 0L); }
  public static void addUnk8(FlatBufferBuilder builder, boolean unk8) { builder.addBoolean(8, unk8, false); }
  public static void addUnk9(FlatBufferBuilder builder, boolean unk9) { builder.addBoolean(9, unk9, false); }
  public static int endtrinity_LightApplierComponent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_LightApplierComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_LightApplierComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_LightApplierComponent get(int j) { return get(new trinity_LightApplierComponent(), j); }
    public trinity_LightApplierComponent get(trinity_LightApplierComponent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_LightApplierComponentT unpack() {
    trinity_LightApplierComponentT _o = new trinity_LightApplierComponentT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_LightApplierComponentT _o) {
    String _oFilePath = filePath();
    _o.setFilePath(_oFilePath);
    long _oUnk1 = unk1();
    _o.setUnk1(_oUnk1);
    float _oUnk2 = unk2();
    _o.setUnk2(_oUnk2);
    boolean _oUnk3 = unk3();
    _o.setUnk3(_oUnk3);
    String _oUnk4 = unk4();
    _o.setUnk4(_oUnk4);
    long _oUnk5 = unk5();
    _o.setUnk5(_oUnk5);
    boolean _oUnk6 = unk6();
    _o.setUnk6(_oUnk6);
    long _oUnk7 = unk7();
    _o.setUnk7(_oUnk7);
    boolean _oUnk8 = unk8();
    _o.setUnk8(_oUnk8);
    boolean _oUnk9 = unk9();
    _o.setUnk9(_oUnk9);
  }
  public static int pack(FlatBufferBuilder builder, trinity_LightApplierComponentT _o) {
    if (_o == null) return 0;
    int _filePath = _o.getFilePath() == null ? 0 : builder.createString(_o.getFilePath());
    int _unk4 = _o.getUnk4() == null ? 0 : builder.createString(_o.getUnk4());
    return createtrinity_LightApplierComponent(
      builder,
      _filePath,
      _o.getUnk1(),
      _o.getUnk2(),
      _o.getUnk3(),
      _unk4,
      _o.getUnk5(),
      _o.getUnk6(),
      _o.getUnk7(),
      _o.getUnk8(),
      _o.getUnk9());
  }
}

