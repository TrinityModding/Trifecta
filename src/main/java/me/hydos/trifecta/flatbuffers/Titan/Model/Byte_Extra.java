// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Byte_Extra extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Byte_Extra getRootAsByte_Extra(ByteBuffer _bb) { return getRootAsByte_Extra(_bb, new Byte_Extra()); }
  public static Byte_Extra getRootAsByte_Extra(ByteBuffer _bb, Byte_Extra obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Byte_Extra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte value() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : -1; }

  public static int createByte_Extra(FlatBufferBuilder builder,
      byte value) {
    builder.startTable(1);
    Byte_Extra.addValue(builder, value);
    return Byte_Extra.endByte_Extra(builder);
  }

  public static void startByte_Extra(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, byte value) { builder.addByte(0, value, -1); }
  public static int endByte_Extra(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Byte_Extra get(int j) { return get(new Byte_Extra(), j); }
    public Byte_Extra get(Byte_Extra obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

