// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_GridStremingGroup extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_GridStremingGroup getRootAstrinity_GridStremingGroup(ByteBuffer _bb) { return getRootAstrinity_GridStremingGroup(_bb, new trinity_GridStremingGroup()); }
  public static trinity_GridStremingGroup getRootAstrinity_GridStremingGroup(ByteBuffer _bb, trinity_GridStremingGroup obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_GridStremingGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String unk0() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk0AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer unk0InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public boolean unk1() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public me.hydos.trifecta.flatbuffers.Vec3f unk2() { return unk2(new me.hydos.trifecta.flatbuffers.Vec3f()); }
  public me.hydos.trifecta.flatbuffers.Vec3f unk2(me.hydos.trifecta.flatbuffers.Vec3f obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public float unk3(int j) { int o = __offset(10); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int unk3Length() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector unk3Vector() { return unk3Vector(new FloatVector()); }
  public FloatVector unk3Vector(FloatVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer unk3AsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer unk3InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  public int unk4(int j) { int o = __offset(12); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int unk4Length() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ShortVector unk4Vector() { return unk4Vector(new ShortVector()); }
  public ShortVector unk4Vector(ShortVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer unk4AsByteBuffer() { return __vector_as_bytebuffer(12, 2); }
  public ByteBuffer unk4InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 2); }
  public float unk5() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk6() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static void starttrinity_GridStremingGroup(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addUnk0(FlatBufferBuilder builder, int unk0Offset) { builder.addOffset(0, unk0Offset, 0); }
  public static void addUnk1(FlatBufferBuilder builder, boolean unk1) { builder.addBoolean(1, unk1, false); }
  public static void addUnk2(FlatBufferBuilder builder, int unk2Offset) { builder.addStruct(2, unk2Offset, 0); }
  public static void addUnk3(FlatBufferBuilder builder, int unk3Offset) { builder.addOffset(3, unk3Offset, 0); }
  public static int createUnk3Vector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startUnk3Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk4(FlatBufferBuilder builder, int unk4Offset) { builder.addOffset(4, unk4Offset, 0); }
  public static int createUnk4Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort((short) data[i]); return builder.endVector(); }
  public static void startUnk4Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addUnk5(FlatBufferBuilder builder, float unk5) { builder.addFloat(5, unk5, 0.0f); }
  public static void addUnk6(FlatBufferBuilder builder, float unk6) { builder.addFloat(6, unk6, 0.0f); }
  public static int endtrinity_GridStremingGroup(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_GridStremingGroupBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_GridStremingGroupBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_GridStremingGroup get(int j) { return get(new trinity_GridStremingGroup(), j); }
    public trinity_GridStremingGroup get(trinity_GridStremingGroup obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_GridStremingGroupT unpack() {
    trinity_GridStremingGroupT _o = new trinity_GridStremingGroupT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_GridStremingGroupT _o) {
    String _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    boolean _oUnk1 = unk1();
    _o.setUnk1(_oUnk1);
    if (unk2() != null) unk2().unpackTo(_o.getUnk2());
    else _o.setUnk2(null);
    float[] _oUnk3 = new float[unk3Length()];
    for (int _j = 0; _j < unk3Length(); ++_j) {_oUnk3[_j] = unk3(_j);}
    _o.setUnk3(_oUnk3);
    int[] _oUnk4 = new int[unk4Length()];
    for (int _j = 0; _j < unk4Length(); ++_j) {_oUnk4[_j] = unk4(_j);}
    _o.setUnk4(_oUnk4);
    float _oUnk5 = unk5();
    _o.setUnk5(_oUnk5);
    float _oUnk6 = unk6();
    _o.setUnk6(_oUnk6);
  }
  public static int pack(FlatBufferBuilder builder, trinity_GridStremingGroupT _o) {
    if (_o == null) return 0;
    int _unk0 = _o.getUnk0() == null ? 0 : builder.createString(_o.getUnk0());
    int _unk3 = 0;
    if (_o.getUnk3() != null) {
      _unk3 = createUnk3Vector(builder, _o.getUnk3());
    }
    int _unk4 = 0;
    if (_o.getUnk4() != null) {
      _unk4 = createUnk4Vector(builder, _o.getUnk4());
    }
    starttrinity_GridStremingGroup(builder);
    addUnk0(builder, _unk0);
    addUnk1(builder, _o.getUnk1());
    addUnk2(builder, me.hydos.trifecta.flatbuffers.Vec3f.pack(builder, _o.getUnk2()));
    addUnk3(builder, _unk3);
    addUnk4(builder, _unk4);
    addUnk5(builder, _o.getUnk5());
    addUnk6(builder, _o.getUnk6());
    return endtrinity_GridStremingGroup(builder);
  }
}

