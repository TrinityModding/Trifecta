// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Property extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Property getRootAsProperty(ByteBuffer _bb) { return getRootAsProperty(_bb, new Property()); }
  public static Property getRootAsProperty(ByteBuffer _bb, Property obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Property __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public boolean value() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.someTable3 unk1() { return unk1(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.someTable3()); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.someTable3 unk1(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.someTable3 obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createProperty(FlatBufferBuilder builder,
      int nameOffset,
      boolean value,
      int unk1Offset) {
    builder.startTable(3);
    Property.addUnk1(builder, unk1Offset);
    Property.addName(builder, nameOffset);
    Property.addValue(builder, value);
    return Property.endProperty(builder);
  }

  public static void startProperty(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addValue(FlatBufferBuilder builder, boolean value) { builder.addBoolean(1, value, false); }
  public static void addUnk1(FlatBufferBuilder builder, int unk1Offset) { builder.addOffset(2, unk1Offset, 0); }
  public static int endProperty(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Property get(int j) { return get(new Property(), j); }
    public Property get(Property obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PropertyT unpack() {
    PropertyT _o = new PropertyT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PropertyT _o) {
    String _oName = name();
    _o.setName(_oName);
    boolean _oValue = value();
    _o.setValue(_oValue);
    if (unk1() != null) _o.setUnk1(unk1().unpack());
    else _o.setUnk1(null);
  }
  public static int pack(FlatBufferBuilder builder, PropertyT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _unk1 = _o.getUnk1() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.TrinityScene.someTable3.pack(builder, _o.getUnk1());
    return createProperty(
      builder,
      _name,
      _o.getValue(),
      _unk1);
  }
}

