// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class TRSKLT {
  private long res0;
  private me.hydos.trifecta.flatbuffers.Titan.Model.TransformNodeT[] transformNodes;
  private me.hydos.trifecta.flatbuffers.Titan.Model.BoneT[] bones;
  private me.hydos.trifecta.flatbuffers.Titan.Model.IKControlT[] iks;
  private long rigOffset;

  public long getRes0() { return res0; }

  public void setRes0(long res0) { this.res0 = res0; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.TransformNodeT[] getTransformNodes() { return transformNodes; }

  public void setTransformNodes(me.hydos.trifecta.flatbuffers.Titan.Model.TransformNodeT[] transformNodes) { this.transformNodes = transformNodes; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.BoneT[] getBones() { return bones; }

  public void setBones(me.hydos.trifecta.flatbuffers.Titan.Model.BoneT[] bones) { this.bones = bones; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.IKControlT[] getIks() { return iks; }

  public void setIks(me.hydos.trifecta.flatbuffers.Titan.Model.IKControlT[] iks) { this.iks = iks; }

  public long getRigOffset() { return rigOffset; }

  public void setRigOffset(long rigOffset) { this.rigOffset = rigOffset; }


  public TRSKLT() {
    this.res0 = 0L;
    this.transformNodes = null;
    this.bones = null;
    this.iks = null;
    this.rigOffset = 0L;
  }
  public static TRSKLT deserializeFromBinary(byte[] fbBuffer) {
    return TRSKL.getRootAsTRSKL(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    TRSKL.finishTRSKLBuffer(fbb, TRSKL.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

