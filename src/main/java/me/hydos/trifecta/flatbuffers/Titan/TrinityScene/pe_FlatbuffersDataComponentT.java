// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class pe_FlatbuffersDataComponentT {
  private String dataFbs;
  private me.hydos.trifecta.flatbuffers.Titan.TrinityScene.fbdc_additional_dataT[] unk1;

  public String getDataFbs() { return dataFbs; }

  public void setDataFbs(String dataFbs) { this.dataFbs = dataFbs; }

  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.fbdc_additional_dataT[] getUnk1() { return unk1; }

  public void setUnk1(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.fbdc_additional_dataT[] unk1) { this.unk1 = unk1; }


  public pe_FlatbuffersDataComponentT() {
    this.dataFbs = null;
    this.unk1 = null;
  }
  public static pe_FlatbuffersDataComponentT deserializeFromBinary(byte[] fbBuffer) {
    return pe_FlatbuffersDataComponent.getRootAspe_FlatbuffersDataComponent(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    pe_FlatbuffersDataComponent.finishpe_FlatbuffersDataComponentBuffer(fbb, pe_FlatbuffersDataComponent.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

