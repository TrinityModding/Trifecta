// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MorphSize extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static MorphSize getRootAsMorphSize(ByteBuffer _bb) { return getRootAsMorphSize(_bb, new MorphSize()); }
  public static MorphSize getRootAsMorphSize(ByteBuffer _bb, MorphSize obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MorphSize __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long size() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createMorphSize(FlatBufferBuilder builder,
      long size) {
    builder.startTable(1);
    MorphSize.addSize(builder, size);
    return MorphSize.endMorphSize(builder);
  }

  public static void startMorphSize(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addSize(FlatBufferBuilder builder, long size) { builder.addInt(0, (int) size, (int) 0L); }
  public static int endMorphSize(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MorphSize get(int j) { return get(new MorphSize(), j); }
    public MorphSize get(MorphSize obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MorphSizeT unpack() {
    MorphSizeT _o = new MorphSizeT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MorphSizeT _o) {
    long _oSize = size();
    _o.setSize(_oSize);
  }
  public static int pack(FlatBufferBuilder builder, MorphSizeT _o) {
    if (_o == null) return 0;
    return createMorphSize(
      builder,
      _o.getSize());
  }
}

