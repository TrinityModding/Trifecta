// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class pe_WeatherEffectT {
  private String effectName;
  private String effectFilePath;
  private me.hydos.trifecta.flatbuffers.Vec3fT unk2;
  private long unk3;
  private boolean unk4;

  public String getEffectName() { return effectName; }

  public void setEffectName(String effectName) { this.effectName = effectName; }

  public String getEffectFilePath() { return effectFilePath; }

  public void setEffectFilePath(String effectFilePath) { this.effectFilePath = effectFilePath; }

  public me.hydos.trifecta.flatbuffers.Vec3fT getUnk2() { return unk2; }

  public void setUnk2(me.hydos.trifecta.flatbuffers.Vec3fT unk2) { this.unk2 = unk2; }

  public long getUnk3() { return unk3; }

  public void setUnk3(long unk3) { this.unk3 = unk3; }

  public boolean getUnk4() { return unk4; }

  public void setUnk4(boolean unk4) { this.unk4 = unk4; }


  public pe_WeatherEffectT() {
    this.effectName = null;
    this.effectFilePath = null;
    this.unk2 = new me.hydos.trifecta.flatbuffers.Vec3fT();
    this.unk3 = 0L;
    this.unk4 = false;
  }
  public static pe_WeatherEffectT deserializeFromBinary(byte[] fbBuffer) {
    return pe_WeatherEffect.getRootAspe_WeatherEffect(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    pe_WeatherEffect.finishpe_WeatherEffectBuffer(fbb, pe_WeatherEffect.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

