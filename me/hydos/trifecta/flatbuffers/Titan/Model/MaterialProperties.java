// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MaterialProperties extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static MaterialProperties getRootAsMaterialProperties(ByteBuffer _bb) { return getRootAsMaterialProperties(_bb, new MaterialProperties()); }
  public static MaterialProperties getRootAsMaterialProperties(ByteBuffer _bb, MaterialProperties obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MaterialProperties __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper mappers(int j) { return mappers(new me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper mappers(me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int mappersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper.Vector mappersVector() { return mappersVector(new me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper.Vector mappersVector(me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public long res2() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long unk3() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.EmbeddedTRACM tracm() { return tracm(new me.hydos.trifecta.flatbuffers.Titan.Model.EmbeddedTRACM()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.EmbeddedTRACM tracm(me.hydos.trifecta.flatbuffers.Titan.Model.EmbeddedTRACM obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long res5(int j) { int o = __offset(14); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int res5Length() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public IntVector res5Vector() { return res5Vector(new IntVector()); }
  public IntVector res5Vector(IntVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer res5AsByteBuffer() { return __vector_as_bytebuffer(14, 4); }
  public ByteBuffer res5InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 4); }

  public static int createMaterialProperties(FlatBufferBuilder builder,
      int nameOffset,
      int mappersOffset,
      long res2,
      long unk3,
      int tracmOffset,
      int res5Offset) {
    builder.startTable(6);
    MaterialProperties.addRes5(builder, res5Offset);
    MaterialProperties.addTracm(builder, tracmOffset);
    MaterialProperties.addUnk3(builder, unk3);
    MaterialProperties.addRes2(builder, res2);
    MaterialProperties.addMappers(builder, mappersOffset);
    MaterialProperties.addName(builder, nameOffset);
    return MaterialProperties.endMaterialProperties(builder);
  }

  public static void startMaterialProperties(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addMappers(FlatBufferBuilder builder, int mappersOffset) { builder.addOffset(1, mappersOffset, 0); }
  public static int createMappersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMappersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRes2(FlatBufferBuilder builder, long res2) { builder.addInt(2, (int) res2, (int) 0L); }
  public static void addUnk3(FlatBufferBuilder builder, long unk3) { builder.addInt(3, (int) unk3, (int) 0L); }
  public static void addTracm(FlatBufferBuilder builder, int tracmOffset) { builder.addOffset(4, tracmOffset, 0); }
  public static void addRes5(FlatBufferBuilder builder, int res5Offset) { builder.addOffset(5, res5Offset, 0); }
  public static int createRes5Vector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startRes5Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMaterialProperties(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MaterialProperties get(int j) { return get(new MaterialProperties(), j); }
    public MaterialProperties get(MaterialProperties obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MaterialPropertiesT unpack() {
    MaterialPropertiesT _o = new MaterialPropertiesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MaterialPropertiesT _o) {
    String _oName = name();
    _o.setName(_oName);
    me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapperT[] _oMappers = new me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapperT[mappersLength()];
    for (int _j = 0; _j < mappersLength(); ++_j) {_oMappers[_j] = (mappers(_j) != null ? mappers(_j).unpack() : null);}
    _o.setMappers(_oMappers);
    long _oRes2 = res2();
    _o.setRes2(_oRes2);
    long _oUnk3 = unk3();
    _o.setUnk3(_oUnk3);
    if (tracm() != null) _o.setTracm(tracm().unpack());
    else _o.setTracm(null);
    long[] _oRes5 = new long[res5Length()];
    for (int _j = 0; _j < res5Length(); ++_j) {_oRes5[_j] = res5(_j);}
    _o.setRes5(_oRes5);
  }
  public static int pack(FlatBufferBuilder builder, MaterialPropertiesT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _mappers = 0;
    if (_o.getMappers() != null) {
      int[] __mappers = new int[_o.getMappers().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapperT _e : _o.getMappers()) { __mappers[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.MaterialMapper.pack(builder, _e); _j++;}
      _mappers = createMappersVector(builder, __mappers);
    }
    int _tracm = _o.getTracm() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.Model.EmbeddedTRACM.pack(builder, _o.getTracm());
    int _res5 = 0;
    if (_o.getRes5() != null) {
      _res5 = createRes5Vector(builder, _o.getRes5());
    }
    return createMaterialProperties(
      builder,
      _name,
      _mappers,
      _o.getRes2(),
      _o.getUnk3(),
      _tracm,
      _res5);
  }
}

