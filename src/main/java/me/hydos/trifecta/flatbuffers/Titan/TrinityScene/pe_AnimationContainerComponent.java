// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class pe_AnimationContainerComponent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static pe_AnimationContainerComponent getRootAspe_AnimationContainerComponent(ByteBuffer _bb) { return getRootAspe_AnimationContainerComponent(_bb, new pe_AnimationContainerComponent()); }
  public static pe_AnimationContainerComponent getRootAspe_AnimationContainerComponent(ByteBuffer _bb, pe_AnimationContainerComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public pe_AnimationContainerComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String unk0(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int unk0Length() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector unk0Vector() { return unk0Vector(new StringVector()); }
  public StringVector unk0Vector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createpe_AnimationContainerComponent(FlatBufferBuilder builder,
      int unk0Offset) {
    builder.startTable(1);
    pe_AnimationContainerComponent.addUnk0(builder, unk0Offset);
    return pe_AnimationContainerComponent.endpe_AnimationContainerComponent(builder);
  }

  public static void startpe_AnimationContainerComponent(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addUnk0(FlatBufferBuilder builder, int unk0Offset) { builder.addOffset(0, unk0Offset, 0); }
  public static int createUnk0Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUnk0Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endpe_AnimationContainerComponent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishpe_AnimationContainerComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedpe_AnimationContainerComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public pe_AnimationContainerComponent get(int j) { return get(new pe_AnimationContainerComponent(), j); }
    public pe_AnimationContainerComponent get(pe_AnimationContainerComponent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public pe_AnimationContainerComponentT unpack() {
    pe_AnimationContainerComponentT _o = new pe_AnimationContainerComponentT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(pe_AnimationContainerComponentT _o) {
    String[] _oUnk0 = new String[unk0Length()];
    for (int _j = 0; _j < unk0Length(); ++_j) {_oUnk0[_j] = unk0(_j);}
    _o.setUnk0(_oUnk0);
  }
  public static int pack(FlatBufferBuilder builder, pe_AnimationContainerComponentT _o) {
    if (_o == null) return 0;
    int _unk0 = 0;
    if (_o.getUnk0() != null) {
      int[] __unk0 = new int[_o.getUnk0().length];
      int _j = 0;
      for (String _e : _o.getUnk0()) { __unk0[_j] = builder.createString(_e); _j++;}
      _unk0 = createUnk0Vector(builder, __unk0);
    }
    return createpe_AnimationContainerComponent(
      builder,
      _unk0);
  }
}

