// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SP_Entry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static SP_Entry getRootAsSP_Entry(ByteBuffer _bb) { return getRootAsSP_Entry(_bb, new SP_Entry()); }
  public static SP_Entry getRootAsSP_Entry(ByteBuffer _bb, SP_Entry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SP_Entry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Point point() { return point(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Point()); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Point point(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Point obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object objects(int j) { return objects(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object objects(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int objectsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object.Vector objectsVector() { return objectsVector(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object.Vector objectsVector(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSP_Entry(FlatBufferBuilder builder,
      int pointOffset,
      int objectsOffset) {
    builder.startTable(2);
    SP_Entry.addObjects(builder, objectsOffset);
    SP_Entry.addPoint(builder, pointOffset);
    return SP_Entry.endSP_Entry(builder);
  }

  public static void startSP_Entry(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addPoint(FlatBufferBuilder builder, int pointOffset) { builder.addOffset(0, pointOffset, 0); }
  public static void addObjects(FlatBufferBuilder builder, int objectsOffset) { builder.addOffset(1, objectsOffset, 0); }
  public static int createObjectsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startObjectsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSP_Entry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SP_Entry get(int j) { return get(new SP_Entry(), j); }
    public SP_Entry get(SP_Entry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SP_EntryT unpack() {
    SP_EntryT _o = new SP_EntryT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SP_EntryT _o) {
    if (point() != null) _o.setPoint(point().unpack());
    else _o.setPoint(null);
    me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_ObjectT[] _oObjects = new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_ObjectT[objectsLength()];
    for (int _j = 0; _j < objectsLength(); ++_j) {_oObjects[_j] = (objects(_j) != null ? objects(_j).unpack() : null);}
    _o.setObjects(_oObjects);
  }
  public static int pack(FlatBufferBuilder builder, SP_EntryT _o) {
    if (_o == null) return 0;
    int _point = _o.getPoint() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Point.pack(builder, _o.getPoint());
    int _objects = 0;
    if (_o.getObjects() != null) {
      int[] __objects = new int[_o.getObjects().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_ObjectT _e : _o.getObjects()) { __objects[_j] = me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_Object.pack(builder, _e); _j++;}
      _objects = createObjectsVector(builder, __objects);
    }
    return createSP_Entry(
      builder,
      _point,
      _objects);
  }
}

