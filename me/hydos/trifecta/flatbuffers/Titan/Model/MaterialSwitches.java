// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MaterialSwitches extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static MaterialSwitches getRootAsMaterialSwitches(ByteBuffer _bb) { return getRootAsMaterialSwitches(_bb, new MaterialSwitches()); }
  public static MaterialSwitches getRootAsMaterialSwitches(ByteBuffer _bb, MaterialSwitches obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MaterialSwitches __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String materialName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer materialNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer materialNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int materialFlag() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createMaterialSwitches(FlatBufferBuilder builder,
      int materialNameOffset,
      int materialFlag) {
    builder.startTable(2);
    MaterialSwitches.addMaterialName(builder, materialNameOffset);
    MaterialSwitches.addMaterialFlag(builder, materialFlag);
    return MaterialSwitches.endMaterialSwitches(builder);
  }

  public static void startMaterialSwitches(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addMaterialName(FlatBufferBuilder builder, int materialNameOffset) { builder.addOffset(0, materialNameOffset, 0); }
  public static void addMaterialFlag(FlatBufferBuilder builder, int materialFlag) { builder.addByte(1, (byte) materialFlag, (byte) 0); }
  public static int endMaterialSwitches(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MaterialSwitches get(int j) { return get(new MaterialSwitches(), j); }
    public MaterialSwitches get(MaterialSwitches obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MaterialSwitchesT unpack() {
    MaterialSwitchesT _o = new MaterialSwitchesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MaterialSwitchesT _o) {
    String _oMaterialName = materialName();
    _o.setMaterialName(_oMaterialName);
    int _oMaterialFlag = materialFlag();
    _o.setMaterialFlag(_oMaterialFlag);
  }
  public static int pack(FlatBufferBuilder builder, MaterialSwitchesT _o) {
    if (_o == null) return 0;
    int _materialName = _o.getMaterialName() == null ? 0 : builder.createString(_o.getMaterialName());
    return createMaterialSwitches(
      builder,
      _materialName,
      _o.getMaterialFlag());
  }
}

