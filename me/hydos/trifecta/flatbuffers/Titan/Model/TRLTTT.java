// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class TRLTTT {
  private long res0;
  private me.hydos.trifecta.flatbuffers.Titan.Model.LookupTableT[] entries;

  public long getRes0() { return res0; }

  public void setRes0(long res0) { this.res0 = res0; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.LookupTableT[] getEntries() { return entries; }

  public void setEntries(me.hydos.trifecta.flatbuffers.Titan.Model.LookupTableT[] entries) { this.entries = entries; }


  public TRLTTT() {
    this.res0 = 0L;
    this.entries = null;
  }
  public static TRLTTT deserializeFromBinary(byte[] fbBuffer) {
    return TRLTT.getRootAsTRLTT(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    TRLTT.finishTRLTTBuffer(fbb, TRLTT.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

