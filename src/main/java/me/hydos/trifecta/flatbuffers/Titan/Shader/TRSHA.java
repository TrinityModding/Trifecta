// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Shader;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRSHA extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static TRSHA getRootAsTRSHA(ByteBuffer _bb) { return getRootAsTRSHA(_bb, new TRSHA()); }
  public static TRSHA getRootAsTRSHA(ByteBuffer _bb, TRSHA obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRSHA __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String fileName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fileNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer fileNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public SlotMap shaderParam(int j) { return shaderParam(new SlotMap(), j); }
  public SlotMap shaderParam(SlotMap obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int shaderParamLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public SlotMap.Vector shaderParamVector() { return shaderParamVector(new SlotMap.Vector()); }
  public SlotMap.Vector shaderParamVector(SlotMap.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public SlotMap globalParam(int j) { return globalParam(new SlotMap(), j); }
  public SlotMap globalParam(SlotMap obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int globalParamLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public SlotMap.Vector globalParamVector() { return globalParamVector(new SlotMap.Vector()); }
  public SlotMap.Vector globalParamVector(SlotMap.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public long paramBuffer(int j) { int o = __offset(12); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int paramBufferLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public IntVector paramBufferVector() { return paramBufferVector(new IntVector()); }
  public IntVector paramBufferVector(IntVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer paramBufferAsByteBuffer() { return __vector_as_bytebuffer(12, 4); }
  public ByteBuffer paramBufferInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 4); }
  public boolean hasShaderParam() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasGlobalParam() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createTRSHA(FlatBufferBuilder builder,
      int nameOffset,
      int fileNameOffset,
      int shaderParamOffset,
      int globalParamOffset,
      int paramBufferOffset,
      boolean hasShaderParam,
      boolean hasGlobalParam) {
    builder.startTable(7);
    TRSHA.addParamBuffer(builder, paramBufferOffset);
    TRSHA.addGlobalParam(builder, globalParamOffset);
    TRSHA.addShaderParam(builder, shaderParamOffset);
    TRSHA.addFileName(builder, fileNameOffset);
    TRSHA.addName(builder, nameOffset);
    TRSHA.addHasGlobalParam(builder, hasGlobalParam);
    TRSHA.addHasShaderParam(builder, hasShaderParam);
    return TRSHA.endTRSHA(builder);
  }

  public static void startTRSHA(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addFileName(FlatBufferBuilder builder, int fileNameOffset) { builder.addOffset(1, fileNameOffset, 0); }
  public static void addShaderParam(FlatBufferBuilder builder, int shaderParamOffset) { builder.addOffset(2, shaderParamOffset, 0); }
  public static int createShaderParamVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startShaderParamVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGlobalParam(FlatBufferBuilder builder, int globalParamOffset) { builder.addOffset(3, globalParamOffset, 0); }
  public static int createGlobalParamVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGlobalParamVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addParamBuffer(FlatBufferBuilder builder, int paramBufferOffset) { builder.addOffset(4, paramBufferOffset, 0); }
  public static int createParamBufferVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startParamBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHasShaderParam(FlatBufferBuilder builder, boolean hasShaderParam) { builder.addBoolean(5, hasShaderParam, false); }
  public static void addHasGlobalParam(FlatBufferBuilder builder, boolean hasGlobalParam) { builder.addBoolean(6, hasGlobalParam, false); }
  public static int endTRSHA(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRSHABuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRSHABuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRSHA get(int j) { return get(new TRSHA(), j); }
    public TRSHA get(TRSHA obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TRSHAT unpack() {
    TRSHAT _o = new TRSHAT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TRSHAT _o) {
    String _oName = name();
    _o.setName(_oName);
    String _oFileName = fileName();
    _o.setFileName(_oFileName);
    SlotMapT[] _oShaderParam = new SlotMapT[shaderParamLength()];
    for (int _j = 0; _j < shaderParamLength(); ++_j) {_oShaderParam[_j] = (shaderParam(_j) != null ? shaderParam(_j).unpack() : null);}
    _o.setShaderParam(_oShaderParam);
    SlotMapT[] _oGlobalParam = new SlotMapT[globalParamLength()];
    for (int _j = 0; _j < globalParamLength(); ++_j) {_oGlobalParam[_j] = (globalParam(_j) != null ? globalParam(_j).unpack() : null);}
    _o.setGlobalParam(_oGlobalParam);
    long[] _oParamBuffer = new long[paramBufferLength()];
    for (int _j = 0; _j < paramBufferLength(); ++_j) {_oParamBuffer[_j] = paramBuffer(_j);}
    _o.setParamBuffer(_oParamBuffer);
    boolean _oHasShaderParam = hasShaderParam();
    _o.setHasShaderParam(_oHasShaderParam);
    boolean _oHasGlobalParam = hasGlobalParam();
    _o.setHasGlobalParam(_oHasGlobalParam);
  }
  public static int pack(FlatBufferBuilder builder, TRSHAT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _fileName = _o.getFileName() == null ? 0 : builder.createString(_o.getFileName());
    int _shaderParam = 0;
    if (_o.getShaderParam() != null) {
      int[] __shaderParam = new int[_o.getShaderParam().length];
      int _j = 0;
      for (SlotMapT _e : _o.getShaderParam()) { __shaderParam[_j] = SlotMap.pack(builder, _e); _j++;}
      _shaderParam = createShaderParamVector(builder, __shaderParam);
    }
    int _globalParam = 0;
    if (_o.getGlobalParam() != null) {
      int[] __globalParam = new int[_o.getGlobalParam().length];
      int _j = 0;
      for (SlotMapT _e : _o.getGlobalParam()) { __globalParam[_j] = SlotMap.pack(builder, _e); _j++;}
      _globalParam = createGlobalParamVector(builder, __globalParam);
    }
    int _paramBuffer = 0;
    if (_o.getParamBuffer() != null) {
      _paramBuffer = createParamBufferVector(builder, _o.getParamBuffer());
    }
    return createTRSHA(
      builder,
      _name,
      _fileName,
      _shaderParam,
      _globalParam,
      _paramBuffer,
      _o.getHasShaderParam(),
      _o.getHasGlobalParam());
  }
}

