// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class trinity_StreamingPointT {
  private me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_EntryT[] entries;

  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_EntryT[] getEntries() { return entries; }

  public void setEntries(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.SP_EntryT[] entries) { this.entries = entries; }


  public trinity_StreamingPointT() {
    this.entries = null;
  }
  public static trinity_StreamingPointT deserializeFromBinary(byte[] fbBuffer) {
    return trinity_StreamingPoint.getRootAstrinity_StreamingPoint(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    trinity_StreamingPoint.finishtrinity_StreamingPointBuffer(fbb, trinity_StreamingPoint.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

