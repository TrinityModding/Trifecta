// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class TRMBFT {
  private long unused;
  private me.hydos.trifecta.flatbuffers.Titan.Model.BufferT[] buffers;

  public long getUnused() { return unused; }

  public void setUnused(long unused) { this.unused = unused; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.BufferT[] getBuffers() { return buffers; }

  public void setBuffers(me.hydos.trifecta.flatbuffers.Titan.Model.BufferT[] buffers) { this.buffers = buffers; }


  public TRMBFT() {
    this.unused = 0L;
    this.buffers = null;
  }
  public static TRMBFT deserializeFromBinary(byte[] fbBuffer) {
    return TRMBF.getRootAsTRMBF(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    TRMBF.finishTRMBFBuffer(fbb, TRMBF.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

