// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_TerrainTreeTemplate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_TerrainTreeTemplate getRootAstrinity_TerrainTreeTemplate(ByteBuffer _bb) { return getRootAstrinity_TerrainTreeTemplate(_bb, new trinity_TerrainTreeTemplate()); }
  public static trinity_TerrainTreeTemplate getRootAstrinity_TerrainTreeTemplate(ByteBuffer _bb, trinity_TerrainTreeTemplate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_TerrainTreeTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long unk0() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String templateFilePath() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer templateFilePathAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer templateFilePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createtrinity_TerrainTreeTemplate(FlatBufferBuilder builder,
      long unk0,
      int templateFilePathOffset) {
    builder.startTable(2);
    trinity_TerrainTreeTemplate.addUnk0(builder, unk0);
    trinity_TerrainTreeTemplate.addTemplateFilePath(builder, templateFilePathOffset);
    return trinity_TerrainTreeTemplate.endtrinity_TerrainTreeTemplate(builder);
  }

  public static void starttrinity_TerrainTreeTemplate(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addUnk0(FlatBufferBuilder builder, long unk0) { builder.addLong(0, unk0, 0L); }
  public static void addTemplateFilePath(FlatBufferBuilder builder, int templateFilePathOffset) { builder.addOffset(1, templateFilePathOffset, 0); }
  public static int endtrinity_TerrainTreeTemplate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_TerrainTreeTemplateBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_TerrainTreeTemplateBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_TerrainTreeTemplate get(int j) { return get(new trinity_TerrainTreeTemplate(), j); }
    public trinity_TerrainTreeTemplate get(trinity_TerrainTreeTemplate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_TerrainTreeTemplateT unpack() {
    trinity_TerrainTreeTemplateT _o = new trinity_TerrainTreeTemplateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_TerrainTreeTemplateT _o) {
    long _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    String _oTemplateFilePath = templateFilePath();
    _o.setTemplateFilePath(_oTemplateFilePath);
  }
  public static int pack(FlatBufferBuilder builder, trinity_TerrainTreeTemplateT _o) {
    if (_o == null) return 0;
    int _templateFilePath = _o.getTemplateFilePath() == null ? 0 : builder.createString(_o.getTemplateFilePath());
    return createtrinity_TerrainTreeTemplate(
      builder,
      _o.getUnk0(),
      _templateFilePath);
  }
}

