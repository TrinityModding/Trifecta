// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CcdataMasterEntry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static CcdataMasterEntry getRootAsCcdataMasterEntry(ByteBuffer _bb) { return getRootAsCcdataMasterEntry(_bb, new CcdataMasterEntry()); }
  public static CcdataMasterEntry getRootAsCcdataMasterEntry(ByteBuffer _bb, CcdataMasterEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CcdataMasterEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String part() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer partAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer partInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String file() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fileAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer fileInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String name() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createCcdataMasterEntry(FlatBufferBuilder builder,
      int partOffset,
      int fileOffset,
      int nameOffset) {
    builder.startTable(3);
    CcdataMasterEntry.addName(builder, nameOffset);
    CcdataMasterEntry.addFile(builder, fileOffset);
    CcdataMasterEntry.addPart(builder, partOffset);
    return CcdataMasterEntry.endCcdataMasterEntry(builder);
  }

  public static void startCcdataMasterEntry(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addPart(FlatBufferBuilder builder, int partOffset) { builder.addOffset(0, partOffset, 0); }
  public static void addFile(FlatBufferBuilder builder, int fileOffset) { builder.addOffset(1, fileOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static int endCcdataMasterEntry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CcdataMasterEntry get(int j) { return get(new CcdataMasterEntry(), j); }
    public CcdataMasterEntry get(CcdataMasterEntry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public CcdataMasterEntryT unpack() {
    CcdataMasterEntryT _o = new CcdataMasterEntryT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(CcdataMasterEntryT _o) {
    String _oPart = part();
    _o.setPart(_oPart);
    String _oFile = file();
    _o.setFile(_oFile);
    String _oName = name();
    _o.setName(_oName);
  }
  public static int pack(FlatBufferBuilder builder, CcdataMasterEntryT _o) {
    if (_o == null) return 0;
    int _part = _o.getPart() == null ? 0 : builder.createString(_o.getPart());
    int _file = _o.getFile() == null ? 0 : builder.createString(_o.getFile());
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    return createCcdataMasterEntry(
      builder,
      _part,
      _file,
      _name);
  }
}

