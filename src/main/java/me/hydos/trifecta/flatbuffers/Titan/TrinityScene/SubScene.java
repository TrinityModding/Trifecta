// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SubScene extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static SubScene getRootAsSubScene(ByteBuffer _bb) { return getRootAsSubScene(_bb, new SubScene()); }
  public static SubScene getRootAsSubScene(ByteBuffer _bb, SubScene obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SubScene __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String filePath() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filePathAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer filePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String res1() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer res1AsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer res1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createSubScene(FlatBufferBuilder builder,
      int filePathOffset,
      int res1Offset) {
    builder.startTable(2);
    SubScene.addRes1(builder, res1Offset);
    SubScene.addFilePath(builder, filePathOffset);
    return SubScene.endSubScene(builder);
  }

  public static void startSubScene(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFilePath(FlatBufferBuilder builder, int filePathOffset) { builder.addOffset(0, filePathOffset, 0); }
  public static void addRes1(FlatBufferBuilder builder, int res1Offset) { builder.addOffset(1, res1Offset, 0); }
  public static int endSubScene(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSubSceneBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedSubSceneBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SubScene get(int j) { return get(new SubScene(), j); }
    public SubScene get(SubScene obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SubSceneT unpack() {
    SubSceneT _o = new SubSceneT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SubSceneT _o) {
    String _oFilePath = filePath();
    _o.setFilePath(_oFilePath);
    String _oRes1 = res1();
    _o.setRes1(_oRes1);
  }
  public static int pack(FlatBufferBuilder builder, SubSceneT _o) {
    if (_o == null) return 0;
    int _filePath = _o.getFilePath() == null ? 0 : builder.createString(_o.getFilePath());
    int _res1 = _o.getRes1() == null ? 0 : builder.createString(_o.getRes1());
    return createSubScene(
      builder,
      _filePath,
      _res1);
  }
}

