// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class BoneEntry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static BoneEntry getRootAsBoneEntry(ByteBuffer _bb) { return getRootAsBoneEntry(_bb, new BoneEntry()); }
  public static BoneEntry getRootAsBoneEntry(ByteBuffer _bb, BoneEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BoneEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String slots(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int slotsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector slotsVector() { return slotsVector(new StringVector()); }
  public StringVector slotsVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public float unk3() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createBoneEntry(FlatBufferBuilder builder,
      int nameOffset,
      int slotsOffset,
      float unk3) {
    builder.startTable(3);
    BoneEntry.addUnk3(builder, unk3);
    BoneEntry.addSlots(builder, slotsOffset);
    BoneEntry.addName(builder, nameOffset);
    return BoneEntry.endBoneEntry(builder);
  }

  public static void startBoneEntry(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addSlots(FlatBufferBuilder builder, int slotsOffset) { builder.addOffset(1, slotsOffset, 0); }
  public static int createSlotsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSlotsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk3(FlatBufferBuilder builder, float unk3) { builder.addFloat(2, unk3, 0.0f); }
  public static int endBoneEntry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BoneEntry get(int j) { return get(new BoneEntry(), j); }
    public BoneEntry get(BoneEntry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public BoneEntryT unpack() {
    BoneEntryT _o = new BoneEntryT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(BoneEntryT _o) {
    String _oName = name();
    _o.setName(_oName);
    String[] _oSlots = new String[slotsLength()];
    for (int _j = 0; _j < slotsLength(); ++_j) {_oSlots[_j] = slots(_j);}
    _o.setSlots(_oSlots);
    float _oUnk3 = unk3();
    _o.setUnk3(_oUnk3);
  }
  public static int pack(FlatBufferBuilder builder, BoneEntryT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _slots = 0;
    if (_o.getSlots() != null) {
      int[] __slots = new int[_o.getSlots().length];
      int _j = 0;
      for (String _e : _o.getSlots()) { __slots[_j] = builder.createString(_e); _j++;}
      _slots = createSlotsVector(builder, __slots);
    }
    return createBoneEntry(
      builder,
      _name,
      _slots,
      _o.getUnk3());
  }
}

