// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class pe_ParticleAudioComponent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static pe_ParticleAudioComponent getRootAspe_ParticleAudioComponent(ByteBuffer _bb) { return getRootAspe_ParticleAudioComponent(_bb, new pe_ParticleAudioComponent()); }
  public static pe_ParticleAudioComponent getRootAspe_ParticleAudioComponent(ByteBuffer _bb, pe_ParticleAudioComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public pe_ParticleAudioComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String unk0() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk0AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer unk0InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String unk1() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk1AsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer unk1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public boolean unk2() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean unk3() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createpe_ParticleAudioComponent(FlatBufferBuilder builder,
      int unk0Offset,
      int unk1Offset,
      boolean unk2,
      boolean unk3) {
    builder.startTable(4);
    pe_ParticleAudioComponent.addUnk1(builder, unk1Offset);
    pe_ParticleAudioComponent.addUnk0(builder, unk0Offset);
    pe_ParticleAudioComponent.addUnk3(builder, unk3);
    pe_ParticleAudioComponent.addUnk2(builder, unk2);
    return pe_ParticleAudioComponent.endpe_ParticleAudioComponent(builder);
  }

  public static void startpe_ParticleAudioComponent(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addUnk0(FlatBufferBuilder builder, int unk0Offset) { builder.addOffset(0, unk0Offset, 0); }
  public static void addUnk1(FlatBufferBuilder builder, int unk1Offset) { builder.addOffset(1, unk1Offset, 0); }
  public static void addUnk2(FlatBufferBuilder builder, boolean unk2) { builder.addBoolean(2, unk2, false); }
  public static void addUnk3(FlatBufferBuilder builder, boolean unk3) { builder.addBoolean(3, unk3, false); }
  public static int endpe_ParticleAudioComponent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishpe_ParticleAudioComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedpe_ParticleAudioComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public pe_ParticleAudioComponent get(int j) { return get(new pe_ParticleAudioComponent(), j); }
    public pe_ParticleAudioComponent get(pe_ParticleAudioComponent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public pe_ParticleAudioComponentT unpack() {
    pe_ParticleAudioComponentT _o = new pe_ParticleAudioComponentT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(pe_ParticleAudioComponentT _o) {
    String _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    String _oUnk1 = unk1();
    _o.setUnk1(_oUnk1);
    boolean _oUnk2 = unk2();
    _o.setUnk2(_oUnk2);
    boolean _oUnk3 = unk3();
    _o.setUnk3(_oUnk3);
  }
  public static int pack(FlatBufferBuilder builder, pe_ParticleAudioComponentT _o) {
    if (_o == null) return 0;
    int _unk0 = _o.getUnk0() == null ? 0 : builder.createString(_o.getUnk0());
    int _unk1 = _o.getUnk1() == null ? 0 : builder.createString(_o.getUnk1());
    return createpe_ParticleAudioComponent(
      builder,
      _unk0,
      _unk1,
      _o.getUnk2(),
      _o.getUnk3());
  }
}

