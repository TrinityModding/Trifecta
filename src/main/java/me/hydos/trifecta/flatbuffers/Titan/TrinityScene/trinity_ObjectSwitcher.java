// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_ObjectSwitcher extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_ObjectSwitcher getRootAstrinity_ObjectSwitcher(ByteBuffer _bb) { return getRootAstrinity_ObjectSwitcher(_bb, new trinity_ObjectSwitcher()); }
  public static trinity_ObjectSwitcher getRootAstrinity_ObjectSwitcher(ByteBuffer _bb, trinity_ObjectSwitcher obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_ObjectSwitcher __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String unk0() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk0AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer unk0InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String unk1() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk1AsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer unk1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createtrinity_ObjectSwitcher(FlatBufferBuilder builder,
      int unk0Offset,
      int unk1Offset) {
    builder.startTable(2);
    trinity_ObjectSwitcher.addUnk1(builder, unk1Offset);
    trinity_ObjectSwitcher.addUnk0(builder, unk0Offset);
    return trinity_ObjectSwitcher.endtrinity_ObjectSwitcher(builder);
  }

  public static void starttrinity_ObjectSwitcher(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addUnk0(FlatBufferBuilder builder, int unk0Offset) { builder.addOffset(0, unk0Offset, 0); }
  public static void addUnk1(FlatBufferBuilder builder, int unk1Offset) { builder.addOffset(1, unk1Offset, 0); }
  public static int endtrinity_ObjectSwitcher(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_ObjectSwitcherBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_ObjectSwitcherBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_ObjectSwitcher get(int j) { return get(new trinity_ObjectSwitcher(), j); }
    public trinity_ObjectSwitcher get(trinity_ObjectSwitcher obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_ObjectSwitcherT unpack() {
    trinity_ObjectSwitcherT _o = new trinity_ObjectSwitcherT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_ObjectSwitcherT _o) {
    String _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    String _oUnk1 = unk1();
    _o.setUnk1(_oUnk1);
  }
  public static int pack(FlatBufferBuilder builder, trinity_ObjectSwitcherT _o) {
    if (_o == null) return 0;
    int _unk0 = _o.getUnk0() == null ? 0 : builder.createString(_o.getUnk0());
    int _unk1 = _o.getUnk1() == null ? 0 : builder.createString(_o.getUnk1());
    return createtrinity_ObjectSwitcher(
      builder,
      _unk0,
      _unk1);
  }
}

