// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class pe_AmbientWindComponent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static pe_AmbientWindComponent getRootAspe_AmbientWindComponent(ByteBuffer _bb) { return getRootAspe_AmbientWindComponent(_bb, new pe_AmbientWindComponent()); }
  public static pe_AmbientWindComponent getRootAspe_AmbientWindComponent(ByteBuffer _bb, pe_AmbientWindComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public pe_AmbientWindComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String unk0() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk0AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer unk0InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public me.hydos.trifecta.flatbuffers.Vec3f unk1() { return unk1(new me.hydos.trifecta.flatbuffers.Vec3f()); }
  public me.hydos.trifecta.flatbuffers.Vec3f unk1(me.hydos.trifecta.flatbuffers.Vec3f obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public float res2() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk3() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float unk4() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static void startpe_AmbientWindComponent(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addUnk0(FlatBufferBuilder builder, int unk0Offset) { builder.addOffset(0, unk0Offset, 0); }
  public static void addUnk1(FlatBufferBuilder builder, int unk1Offset) { builder.addStruct(1, unk1Offset, 0); }
  public static void addRes2(FlatBufferBuilder builder, float res2) { builder.addFloat(2, res2, 0.0f); }
  public static void addUnk3(FlatBufferBuilder builder, float unk3) { builder.addFloat(3, unk3, 0.0f); }
  public static void addUnk4(FlatBufferBuilder builder, float unk4) { builder.addFloat(4, unk4, 0.0f); }
  public static int endpe_AmbientWindComponent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishpe_AmbientWindComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedpe_AmbientWindComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public pe_AmbientWindComponent get(int j) { return get(new pe_AmbientWindComponent(), j); }
    public pe_AmbientWindComponent get(pe_AmbientWindComponent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public pe_AmbientWindComponentT unpack() {
    pe_AmbientWindComponentT _o = new pe_AmbientWindComponentT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(pe_AmbientWindComponentT _o) {
    String _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    if (unk1() != null) unk1().unpackTo(_o.getUnk1());
    else _o.setUnk1(null);
    float _oRes2 = res2();
    _o.setRes2(_oRes2);
    float _oUnk3 = unk3();
    _o.setUnk3(_oUnk3);
    float _oUnk4 = unk4();
    _o.setUnk4(_oUnk4);
  }
  public static int pack(FlatBufferBuilder builder, pe_AmbientWindComponentT _o) {
    if (_o == null) return 0;
    int _unk0 = _o.getUnk0() == null ? 0 : builder.createString(_o.getUnk0());
    startpe_AmbientWindComponent(builder);
    addUnk0(builder, _unk0);
    addUnk1(builder, me.hydos.trifecta.flatbuffers.Vec3f.pack(builder, _o.getUnk1()));
    addRes2(builder, _o.getRes2());
    addUnk3(builder, _o.getUnk3());
    addUnk4(builder, _o.getUnk4());
    return endpe_AmbientWindComponent(builder);
  }
}

