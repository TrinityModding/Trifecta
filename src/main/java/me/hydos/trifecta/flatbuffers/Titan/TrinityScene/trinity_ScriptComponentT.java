// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class trinity_ScriptComponentT {
  private String scriptFile;
  private String functionHash;
  private boolean res2;
  private long res3;
  private boolean res4;
  private String className;

  public String getScriptFile() { return scriptFile; }

  public void setScriptFile(String scriptFile) { this.scriptFile = scriptFile; }

  public String getFunctionHash() { return functionHash; }

  public void setFunctionHash(String functionHash) { this.functionHash = functionHash; }

  public boolean getRes2() { return res2; }

  public void setRes2(boolean res2) { this.res2 = res2; }

  public long getRes3() { return res3; }

  public void setRes3(long res3) { this.res3 = res3; }

  public boolean getRes4() { return res4; }

  public void setRes4(boolean res4) { this.res4 = res4; }

  public String getClassName() { return className; }

  public void setClassName(String className) { this.className = className; }


  public trinity_ScriptComponentT() {
    this.scriptFile = null;
    this.functionHash = null;
    this.res2 = false;
    this.res3 = 0L;
    this.res4 = false;
    this.className = null;
  }
  public static trinity_ScriptComponentT deserializeFromBinary(byte[] fbBuffer) {
    return trinity_ScriptComponent.getRootAstrinity_ScriptComponent(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    trinity_ScriptComponent.finishtrinity_ScriptComponentBuffer(fbb, trinity_ScriptComponent.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

