// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_ModelLodSetting extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_ModelLodSetting getRootAstrinity_ModelLodSetting(ByteBuffer _bb) { return getRootAstrinity_ModelLodSetting(_bb, new trinity_ModelLodSetting()); }
  public static trinity_ModelLodSetting getRootAstrinity_ModelLodSetting(ByteBuffer _bb, trinity_ModelLodSetting obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_ModelLodSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String unk0() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk0AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer unk0InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String patern() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer paternAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer paternInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public float unk2(int j) { int o = __offset(8); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int unk2Length() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector unk2Vector() { return unk2Vector(new FloatVector()); }
  public FloatVector unk2Vector(FloatVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer unk2AsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer unk2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData unk3(int j) { return unk3(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData unk3(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int unk3Length() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData.Vector unk3Vector() { return unk3Vector(new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData.Vector unk3Vector(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createtrinity_ModelLodSetting(FlatBufferBuilder builder,
      int unk0Offset,
      int paternOffset,
      int unk2Offset,
      int unk3Offset) {
    builder.startTable(4);
    trinity_ModelLodSetting.addUnk3(builder, unk3Offset);
    trinity_ModelLodSetting.addUnk2(builder, unk2Offset);
    trinity_ModelLodSetting.addPatern(builder, paternOffset);
    trinity_ModelLodSetting.addUnk0(builder, unk0Offset);
    return trinity_ModelLodSetting.endtrinity_ModelLodSetting(builder);
  }

  public static void starttrinity_ModelLodSetting(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addUnk0(FlatBufferBuilder builder, int unk0Offset) { builder.addOffset(0, unk0Offset, 0); }
  public static void addPatern(FlatBufferBuilder builder, int paternOffset) { builder.addOffset(1, paternOffset, 0); }
  public static void addUnk2(FlatBufferBuilder builder, int unk2Offset) { builder.addOffset(2, unk2Offset, 0); }
  public static int createUnk2Vector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startUnk2Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk3(FlatBufferBuilder builder, int unk3Offset) { builder.addOffset(3, unk3Offset, 0); }
  public static int createUnk3Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUnk3Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endtrinity_ModelLodSetting(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_ModelLodSettingBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_ModelLodSettingBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_ModelLodSetting get(int j) { return get(new trinity_ModelLodSetting(), j); }
    public trinity_ModelLodSetting get(trinity_ModelLodSetting obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_ModelLodSettingT unpack() {
    trinity_ModelLodSettingT _o = new trinity_ModelLodSettingT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_ModelLodSettingT _o) {
    String _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    String _oPatern = patern();
    _o.setPatern(_oPatern);
    float[] _oUnk2 = new float[unk2Length()];
    for (int _j = 0; _j < unk2Length(); ++_j) {_oUnk2[_j] = unk2(_j);}
    _o.setUnk2(_oUnk2);
    me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadDataT[] _oUnk3 = new me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadDataT[unk3Length()];
    for (int _j = 0; _j < unk3Length(); ++_j) {_oUnk3[_j] = (unk3(_j) != null ? unk3(_j).unpack() : null);}
    _o.setUnk3(_oUnk3);
  }
  public static int pack(FlatBufferBuilder builder, trinity_ModelLodSettingT _o) {
    if (_o == null) return 0;
    int _unk0 = _o.getUnk0() == null ? 0 : builder.createString(_o.getUnk0());
    int _patern = _o.getPatern() == null ? 0 : builder.createString(_o.getPatern());
    int _unk2 = 0;
    if (_o.getUnk2() != null) {
      _unk2 = createUnk2Vector(builder, _o.getUnk2());
    }
    int _unk3 = 0;
    if (_o.getUnk3() != null) {
      int[] __unk3 = new int[_o.getUnk3().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadDataT _e : _o.getUnk3()) { __unk3[_j] = me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadData.pack(builder, _e); _j++;}
      _unk3 = createUnk3Vector(builder, __unk3);
    }
    return createtrinity_ModelLodSetting(
      builder,
      _unk0,
      _patern,
      _unk2,
      _unk3);
  }
}

