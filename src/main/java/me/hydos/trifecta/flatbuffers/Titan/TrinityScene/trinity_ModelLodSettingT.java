// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class trinity_ModelLodSettingT {
  private String unk0;
  private String patern;
  private float[] unk2;
  private me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadDataT[] unk3;

  public String getUnk0() { return unk0; }

  public void setUnk0(String unk0) { this.unk0 = unk0; }

  public String getPatern() { return patern; }

  public void setPatern(String patern) { this.patern = patern; }

  public float[] getUnk2() { return unk2; }

  public void setUnk2(float[] unk2) { this.unk2 = unk2; }

  public me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadDataT[] getUnk3() { return unk3; }

  public void setUnk3(me.hydos.trifecta.flatbuffers.Titan.TrinityScene.ModelLoadDataT[] unk3) { this.unk3 = unk3; }


  public trinity_ModelLodSettingT() {
    this.unk0 = null;
    this.patern = null;
    this.unk2 = null;
    this.unk3 = null;
  }
  public static trinity_ModelLodSettingT deserializeFromBinary(byte[] fbBuffer) {
    return trinity_ModelLodSetting.getRootAstrinity_ModelLodSetting(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    trinity_ModelLodSetting.finishtrinity_ModelLodSettingBuffer(fbb, trinity_ModelLodSetting.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

