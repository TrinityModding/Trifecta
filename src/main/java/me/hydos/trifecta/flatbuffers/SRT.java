// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SRT extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static SRT getRootAsSRT(ByteBuffer _bb) { return getRootAsSRT(_bb, new SRT()); }
  public static SRT getRootAsSRT(ByteBuffer _bb, SRT obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SRT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public me.hydos.trifecta.flatbuffers.Vec3f scale() { return scale(new me.hydos.trifecta.flatbuffers.Vec3f()); }
  public me.hydos.trifecta.flatbuffers.Vec3f scale(me.hydos.trifecta.flatbuffers.Vec3f obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Vec3f rotation() { return rotation(new me.hydos.trifecta.flatbuffers.Vec3f()); }
  public me.hydos.trifecta.flatbuffers.Vec3f rotation(me.hydos.trifecta.flatbuffers.Vec3f obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Vec3f translation() { return translation(new me.hydos.trifecta.flatbuffers.Vec3f()); }
  public me.hydos.trifecta.flatbuffers.Vec3f translation(me.hydos.trifecta.flatbuffers.Vec3f obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startSRT(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addScale(FlatBufferBuilder builder, int scaleOffset) { builder.addStruct(0, scaleOffset, 0); }
  public static void addRotation(FlatBufferBuilder builder, int rotationOffset) { builder.addStruct(1, rotationOffset, 0); }
  public static void addTranslation(FlatBufferBuilder builder, int translationOffset) { builder.addStruct(2, translationOffset, 0); }
  public static int endSRT(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SRT get(int j) { return get(new SRT(), j); }
    public SRT get(SRT obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SRTT unpack() {
    SRTT _o = new SRTT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SRTT _o) {
    if (scale() != null) scale().unpackTo(_o.getScale());
    else _o.setScale(null);
    if (rotation() != null) rotation().unpackTo(_o.getRotation());
    else _o.setRotation(null);
    if (translation() != null) translation().unpackTo(_o.getTranslation());
    else _o.setTranslation(null);
  }
  public static int pack(FlatBufferBuilder builder, SRTT _o) {
    if (_o == null) return 0;
    startSRT(builder);
    addScale(builder, me.hydos.trifecta.flatbuffers.Vec3f.pack(builder, _o.getScale()));
    addRotation(builder, me.hydos.trifecta.flatbuffers.Vec3f.pack(builder, _o.getRotation()));
    addTranslation(builder, me.hydos.trifecta.flatbuffers.Vec3f.pack(builder, _o.getTranslation()));
    return endSRT(builder);
  }
}

