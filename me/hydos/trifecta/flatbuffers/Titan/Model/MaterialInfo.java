// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MaterialInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static MaterialInfo getRootAsMaterialInfo(ByteBuffer _bb) { return getRootAsMaterialInfo(_bb, new MaterialInfo()); }
  public static MaterialInfo getRootAsMaterialInfo(ByteBuffer _bb, MaterialInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MaterialInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long polyCount() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long polyOffset() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long shUnk3() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String materialName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer materialNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer materialNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public int shUnk4() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : -1; }

  public static int createMaterialInfo(FlatBufferBuilder builder,
      long polyCount,
      long polyOffset,
      long shUnk3,
      int materialNameOffset,
      int shUnk4) {
    builder.startTable(5);
    MaterialInfo.addShUnk4(builder, shUnk4);
    MaterialInfo.addMaterialName(builder, materialNameOffset);
    MaterialInfo.addShUnk3(builder, shUnk3);
    MaterialInfo.addPolyOffset(builder, polyOffset);
    MaterialInfo.addPolyCount(builder, polyCount);
    return MaterialInfo.endMaterialInfo(builder);
  }

  public static void startMaterialInfo(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addPolyCount(FlatBufferBuilder builder, long polyCount) { builder.addInt(0, (int) polyCount, (int) 0L); }
  public static void addPolyOffset(FlatBufferBuilder builder, long polyOffset) { builder.addInt(1, (int) polyOffset, (int) 0L); }
  public static void addShUnk3(FlatBufferBuilder builder, long shUnk3) { builder.addInt(2, (int) shUnk3, (int) 0L); }
  public static void addMaterialName(FlatBufferBuilder builder, int materialNameOffset) { builder.addOffset(3, materialNameOffset, 0); }
  public static void addShUnk4(FlatBufferBuilder builder, int shUnk4) { builder.addInt(4, shUnk4, -1); }
  public static int endMaterialInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MaterialInfo get(int j) { return get(new MaterialInfo(), j); }
    public MaterialInfo get(MaterialInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MaterialInfoT unpack() {
    MaterialInfoT _o = new MaterialInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MaterialInfoT _o) {
    long _oPolyCount = polyCount();
    _o.setPolyCount(_oPolyCount);
    long _oPolyOffset = polyOffset();
    _o.setPolyOffset(_oPolyOffset);
    long _oShUnk3 = shUnk3();
    _o.setShUnk3(_oShUnk3);
    String _oMaterialName = materialName();
    _o.setMaterialName(_oMaterialName);
    int _oShUnk4 = shUnk4();
    _o.setShUnk4(_oShUnk4);
  }
  public static int pack(FlatBufferBuilder builder, MaterialInfoT _o) {
    if (_o == null) return 0;
    int _materialName = _o.getMaterialName() == null ? 0 : builder.createString(_o.getMaterialName());
    return createMaterialInfo(
      builder,
      _o.getPolyCount(),
      _o.getPolyOffset(),
      _o.getShUnk3(),
      _materialName,
      _o.getShUnk4());
  }
}

