// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class pe_AnimationContainerComponentT {
  private String[] unk0;

  public String[] getUnk0() { return unk0; }

  public void setUnk0(String[] unk0) { this.unk0 = unk0; }


  public pe_AnimationContainerComponentT() {
    this.unk0 = null;
  }
  public static pe_AnimationContainerComponentT deserializeFromBinary(byte[] fbBuffer) {
    return pe_AnimationContainerComponent.getRootAspe_AnimationContainerComponent(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    pe_AnimationContainerComponent.finishpe_AnimationContainerComponentBuffer(fbb, pe_AnimationContainerComponent.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

