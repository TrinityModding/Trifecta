// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Buffer extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Buffer getRootAsBuffer(ByteBuffer _bb) { return getRootAsBuffer(_bb, new Buffer()); }
  public static Buffer getRootAsBuffer(ByteBuffer _bb, Buffer obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Buffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.Indexes indexBuffer(int j) { return indexBuffer(new me.hydos.trifecta.flatbuffers.Titan.Model.Indexes(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Indexes indexBuffer(me.hydos.trifecta.flatbuffers.Titan.Model.Indexes obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int indexBufferLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Indexes.Vector indexBufferVector() { return indexBufferVector(new me.hydos.trifecta.flatbuffers.Titan.Model.Indexes.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Indexes.Vector indexBufferVector(me.hydos.trifecta.flatbuffers.Titan.Model.Indexes.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Vertices vertexBuffer(int j) { return vertexBuffer(new me.hydos.trifecta.flatbuffers.Titan.Model.Vertices(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Vertices vertexBuffer(me.hydos.trifecta.flatbuffers.Titan.Model.Vertices obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int vertexBufferLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Vertices.Vector vertexBufferVector() { return vertexBufferVector(new me.hydos.trifecta.flatbuffers.Titan.Model.Vertices.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Vertices.Vector vertexBufferVector(me.hydos.trifecta.flatbuffers.Titan.Model.Vertices.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Morphs morphs(int j) { return morphs(new me.hydos.trifecta.flatbuffers.Titan.Model.Morphs(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Morphs morphs(me.hydos.trifecta.flatbuffers.Titan.Model.Morphs obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int morphsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Morphs.Vector morphsVector() { return morphsVector(new me.hydos.trifecta.flatbuffers.Titan.Model.Morphs.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Morphs.Vector morphsVector(me.hydos.trifecta.flatbuffers.Titan.Model.Morphs.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createBuffer(FlatBufferBuilder builder,
      int indexBufferOffset,
      int vertexBufferOffset,
      int morphsOffset) {
    builder.startTable(3);
    Buffer.addMorphs(builder, morphsOffset);
    Buffer.addVertexBuffer(builder, vertexBufferOffset);
    Buffer.addIndexBuffer(builder, indexBufferOffset);
    return Buffer.endBuffer(builder);
  }

  public static void startBuffer(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addIndexBuffer(FlatBufferBuilder builder, int indexBufferOffset) { builder.addOffset(0, indexBufferOffset, 0); }
  public static int createIndexBufferVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIndexBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVertexBuffer(FlatBufferBuilder builder, int vertexBufferOffset) { builder.addOffset(1, vertexBufferOffset, 0); }
  public static int createVertexBufferVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVertexBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMorphs(FlatBufferBuilder builder, int morphsOffset) { builder.addOffset(2, morphsOffset, 0); }
  public static int createMorphsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMorphsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endBuffer(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Buffer get(int j) { return get(new Buffer(), j); }
    public Buffer get(Buffer obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

