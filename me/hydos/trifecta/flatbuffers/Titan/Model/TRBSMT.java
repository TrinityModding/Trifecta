// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class TRBSMT {
  private me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntryT[] bones;
  private me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntryT[] scalers;
  private me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntryT[] mesh;
  private me.hydos.trifecta.flatbuffers.Titan.Model.UnkEntryT unk;

  public me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntryT[] getBones() { return bones; }

  public void setBones(me.hydos.trifecta.flatbuffers.Titan.Model.BoneEntryT[] bones) { this.bones = bones; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntryT[] getScalers() { return scalers; }

  public void setScalers(me.hydos.trifecta.flatbuffers.Titan.Model.ScalerEntryT[] scalers) { this.scalers = scalers; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntryT[] getMesh() { return mesh; }

  public void setMesh(me.hydos.trifecta.flatbuffers.Titan.Model.MeshEntryT[] mesh) { this.mesh = mesh; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.UnkEntryT getUnk() { return unk; }

  public void setUnk(me.hydos.trifecta.flatbuffers.Titan.Model.UnkEntryT unk) { this.unk = unk; }


  public TRBSMT() {
    this.bones = null;
    this.scalers = null;
    this.mesh = null;
    this.unk = null;
  }
  public static TRBSMT deserializeFromBinary(byte[] fbBuffer) {
    return TRBSM.getRootAsTRBSM(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    TRBSM.finishTRBSMBuffer(fbb, TRBSM.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

