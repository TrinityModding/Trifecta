// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SP_Object extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static SP_Object getRootAsSP_Object(ByteBuffer _bb) { return getRootAsSP_Object(_bb, new SP_Object()); }
  public static SP_Object getRootAsSP_Object(ByteBuffer _bb, SP_Object obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SP_Object __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int nestedType(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int nestedTypeLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector nestedTypeVector() { return nestedTypeVector(new ByteVector()); }
  public ByteVector nestedTypeVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer nestedTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nestedTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createSP_Object(FlatBufferBuilder builder,
      int nameOffset,
      int nestedTypeOffset) {
    builder.startTable(2);
    SP_Object.addNestedType(builder, nestedTypeOffset);
    SP_Object.addName(builder, nameOffset);
    return SP_Object.endSP_Object(builder);
  }

  public static void startSP_Object(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addNestedType(FlatBufferBuilder builder, int nestedTypeOffset) { builder.addOffset(1, nestedTypeOffset, 0); }
  public static int createNestedTypeVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createNestedTypeVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startNestedTypeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endSP_Object(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SP_Object get(int j) { return get(new SP_Object(), j); }
    public SP_Object get(SP_Object obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SP_ObjectT unpack() {
    SP_ObjectT _o = new SP_ObjectT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SP_ObjectT _o) {
    String _oName = name();
    _o.setName(_oName);
    int[] _oNestedType = new int[nestedTypeLength()];
    for (int _j = 0; _j < nestedTypeLength(); ++_j) {_oNestedType[_j] = nestedType(_j);}
    _o.setNestedType(_oNestedType);
  }
  public static int pack(FlatBufferBuilder builder, SP_ObjectT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _nestedType = 0;
    if (_o.getNestedType() != null) {
      byte[] __nestedType = new byte[_o.getNestedType().length];
      int _j = 0;
      for (int _e : _o.getNestedType()) { __nestedType[_j] = (byte) _e; _j++;}
      _nestedType = createNestedTypeVector(builder, __nestedType);
    }
    return createSP_Object(
      builder,
      _name,
      _nestedType);
  }
}

