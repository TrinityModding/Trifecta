// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Material extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Material getRootAsMaterial(ByteBuffer _bb) { return getRootAsMaterial(_bb, new Material()); }
  public static Material getRootAsMaterial(ByteBuffer _bb, Material obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Material __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Shader shaders(int j) { return shaders(new me.hydos.trifecta.flatbuffers.Titan.Model.Shader(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Shader shaders(me.hydos.trifecta.flatbuffers.Titan.Model.Shader obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int shadersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Shader.Vector shadersVector() { return shadersVector(new me.hydos.trifecta.flatbuffers.Titan.Model.Shader.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Shader.Vector shadersVector(me.hydos.trifecta.flatbuffers.Titan.Model.Shader.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Texture textures(int j) { return textures(new me.hydos.trifecta.flatbuffers.Titan.Model.Texture(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Texture textures(me.hydos.trifecta.flatbuffers.Titan.Model.Texture obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int texturesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Texture.Vector texturesVector() { return texturesVector(new me.hydos.trifecta.flatbuffers.Titan.Model.Texture.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Texture.Vector texturesVector(me.hydos.trifecta.flatbuffers.Titan.Model.Texture.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState samplers(int j) { return samplers(new me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState samplers(me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int samplersLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState.Vector samplersVector() { return samplersVector(new me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState.Vector samplersVector(me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter floatParameter(int j) { return floatParameter(new me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter floatParameter(me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int floatParameterLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter.Vector floatParameterVector() { return floatParameterVector(new me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter.Vector floatParameterVector(me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String unk5() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk5AsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer unk5InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter float4LightParameter(int j) { return float4LightParameter(new me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter float4LightParameter(me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int float4LightParameterLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.Vector float4LightParameterVector() { return float4LightParameterVector(new me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.Vector float4LightParameterVector(me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.Vector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter float4Parameter(int j) { return float4Parameter(new me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter float4Parameter(me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter obj, int j) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int float4ParameterLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.Vector float4ParameterVector() { return float4ParameterVector(new me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.Vector float4ParameterVector(me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.Vector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String unk8() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk8AsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer unk8InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter intParameter(int j) { return intParameter(new me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter intParameter(me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter obj, int j) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int intParameterLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter.Vector intParameterVector() { return intParameterVector(new me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter.Vector intParameterVector(me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter.Vector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String unk10() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk10AsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer unk10InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  public String unk11() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk11AsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer unk11InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  public String unk12() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unk12AsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer unk12InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Byte_Extra byteExtra() { return byteExtra(new me.hydos.trifecta.flatbuffers.Titan.Model.Byte_Extra()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Byte_Extra byteExtra(me.hydos.trifecta.flatbuffers.Titan.Model.Byte_Extra obj) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Int_Extra intExtra() { return intExtra(new me.hydos.trifecta.flatbuffers.Titan.Model.Int_Extra()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Int_Extra intExtra(me.hydos.trifecta.flatbuffers.Titan.Model.Int_Extra obj) { int o = __offset(32); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String alphaType() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer alphaTypeAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer alphaTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }

  public static int createMaterial(FlatBufferBuilder builder,
      int nameOffset,
      int shadersOffset,
      int texturesOffset,
      int samplersOffset,
      int floatParameterOffset,
      int unk5Offset,
      int float4LightParameterOffset,
      int float4ParameterOffset,
      int unk8Offset,
      int intParameterOffset,
      int unk10Offset,
      int unk11Offset,
      int unk12Offset,
      int byteExtraOffset,
      int intExtraOffset,
      int alphaTypeOffset) {
    builder.startTable(16);
    Material.addAlphaType(builder, alphaTypeOffset);
    Material.addIntExtra(builder, intExtraOffset);
    Material.addByteExtra(builder, byteExtraOffset);
    Material.addUnk12(builder, unk12Offset);
    Material.addUnk11(builder, unk11Offset);
    Material.addUnk10(builder, unk10Offset);
    Material.addIntParameter(builder, intParameterOffset);
    Material.addUnk8(builder, unk8Offset);
    Material.addFloat4Parameter(builder, float4ParameterOffset);
    Material.addFloat4LightParameter(builder, float4LightParameterOffset);
    Material.addUnk5(builder, unk5Offset);
    Material.addFloatParameter(builder, floatParameterOffset);
    Material.addSamplers(builder, samplersOffset);
    Material.addTextures(builder, texturesOffset);
    Material.addShaders(builder, shadersOffset);
    Material.addName(builder, nameOffset);
    return Material.endMaterial(builder);
  }

  public static void startMaterial(FlatBufferBuilder builder) { builder.startTable(16); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addShaders(FlatBufferBuilder builder, int shadersOffset) { builder.addOffset(1, shadersOffset, 0); }
  public static int createShadersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startShadersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTextures(FlatBufferBuilder builder, int texturesOffset) { builder.addOffset(2, texturesOffset, 0); }
  public static int createTexturesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTexturesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSamplers(FlatBufferBuilder builder, int samplersOffset) { builder.addOffset(3, samplersOffset, 0); }
  public static int createSamplersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSamplersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFloatParameter(FlatBufferBuilder builder, int floatParameterOffset) { builder.addOffset(4, floatParameterOffset, 0); }
  public static int createFloatParameterVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFloatParameterVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk5(FlatBufferBuilder builder, int unk5Offset) { builder.addOffset(5, unk5Offset, 0); }
  public static void addFloat4LightParameter(FlatBufferBuilder builder, int float4LightParameterOffset) { builder.addOffset(6, float4LightParameterOffset, 0); }
  public static int createFloat4LightParameterVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFloat4LightParameterVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFloat4Parameter(FlatBufferBuilder builder, int float4ParameterOffset) { builder.addOffset(7, float4ParameterOffset, 0); }
  public static int createFloat4ParameterVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFloat4ParameterVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk8(FlatBufferBuilder builder, int unk8Offset) { builder.addOffset(8, unk8Offset, 0); }
  public static void addIntParameter(FlatBufferBuilder builder, int intParameterOffset) { builder.addOffset(9, intParameterOffset, 0); }
  public static int createIntParameterVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIntParameterVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnk10(FlatBufferBuilder builder, int unk10Offset) { builder.addOffset(10, unk10Offset, 0); }
  public static void addUnk11(FlatBufferBuilder builder, int unk11Offset) { builder.addOffset(11, unk11Offset, 0); }
  public static void addUnk12(FlatBufferBuilder builder, int unk12Offset) { builder.addOffset(12, unk12Offset, 0); }
  public static void addByteExtra(FlatBufferBuilder builder, int byteExtraOffset) { builder.addOffset(13, byteExtraOffset, 0); }
  public static void addIntExtra(FlatBufferBuilder builder, int intExtraOffset) { builder.addOffset(14, intExtraOffset, 0); }
  public static void addAlphaType(FlatBufferBuilder builder, int alphaTypeOffset) { builder.addOffset(15, alphaTypeOffset, 0); }
  public static int endMaterial(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Material get(int j) { return get(new Material(), j); }
    public Material get(Material obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MaterialT unpack() {
    MaterialT _o = new MaterialT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MaterialT _o) {
    String _oName = name();
    _o.setName(_oName);
    me.hydos.trifecta.flatbuffers.Titan.Model.ShaderT[] _oShaders = new me.hydos.trifecta.flatbuffers.Titan.Model.ShaderT[shadersLength()];
    for (int _j = 0; _j < shadersLength(); ++_j) {_oShaders[_j] = (shaders(_j) != null ? shaders(_j).unpack() : null);}
    _o.setShaders(_oShaders);
    me.hydos.trifecta.flatbuffers.Titan.Model.TextureT[] _oTextures = new me.hydos.trifecta.flatbuffers.Titan.Model.TextureT[texturesLength()];
    for (int _j = 0; _j < texturesLength(); ++_j) {_oTextures[_j] = (textures(_j) != null ? textures(_j).unpack() : null);}
    _o.setTextures(_oTextures);
    me.hydos.trifecta.flatbuffers.Titan.Model.SamplerStateT[] _oSamplers = new me.hydos.trifecta.flatbuffers.Titan.Model.SamplerStateT[samplersLength()];
    for (int _j = 0; _j < samplersLength(); ++_j) {_oSamplers[_j] = (samplers(_j) != null ? samplers(_j).unpack() : null);}
    _o.setSamplers(_oSamplers);
    me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameterT[] _oFloatParameter = new me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameterT[floatParameterLength()];
    for (int _j = 0; _j < floatParameterLength(); ++_j) {_oFloatParameter[_j] = (floatParameter(_j) != null ? floatParameter(_j).unpack() : null);}
    _o.setFloatParameter(_oFloatParameter);
    String _oUnk5 = unk5();
    _o.setUnk5(_oUnk5);
    me.hydos.trifecta.flatbuffers.Titan.Model.Float4ParameterT[] _oFloat4LightParameter = new me.hydos.trifecta.flatbuffers.Titan.Model.Float4ParameterT[float4LightParameterLength()];
    for (int _j = 0; _j < float4LightParameterLength(); ++_j) {_oFloat4LightParameter[_j] = (float4LightParameter(_j) != null ? float4LightParameter(_j).unpack() : null);}
    _o.setFloat4LightParameter(_oFloat4LightParameter);
    me.hydos.trifecta.flatbuffers.Titan.Model.Float4ParameterT[] _oFloat4Parameter = new me.hydos.trifecta.flatbuffers.Titan.Model.Float4ParameterT[float4ParameterLength()];
    for (int _j = 0; _j < float4ParameterLength(); ++_j) {_oFloat4Parameter[_j] = (float4Parameter(_j) != null ? float4Parameter(_j).unpack() : null);}
    _o.setFloat4Parameter(_oFloat4Parameter);
    String _oUnk8 = unk8();
    _o.setUnk8(_oUnk8);
    me.hydos.trifecta.flatbuffers.Titan.Model.IntParameterT[] _oIntParameter = new me.hydos.trifecta.flatbuffers.Titan.Model.IntParameterT[intParameterLength()];
    for (int _j = 0; _j < intParameterLength(); ++_j) {_oIntParameter[_j] = (intParameter(_j) != null ? intParameter(_j).unpack() : null);}
    _o.setIntParameter(_oIntParameter);
    String _oUnk10 = unk10();
    _o.setUnk10(_oUnk10);
    String _oUnk11 = unk11();
    _o.setUnk11(_oUnk11);
    String _oUnk12 = unk12();
    _o.setUnk12(_oUnk12);
    if (byteExtra() != null) _o.setByteExtra(byteExtra().unpack());
    else _o.setByteExtra(null);
    if (intExtra() != null) _o.setIntExtra(intExtra().unpack());
    else _o.setIntExtra(null);
    String _oAlphaType = alphaType();
    _o.setAlphaType(_oAlphaType);
  }
  public static int pack(FlatBufferBuilder builder, MaterialT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _shaders = 0;
    if (_o.getShaders() != null) {
      int[] __shaders = new int[_o.getShaders().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.ShaderT _e : _o.getShaders()) { __shaders[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.Shader.pack(builder, _e); _j++;}
      _shaders = createShadersVector(builder, __shaders);
    }
    int _textures = 0;
    if (_o.getTextures() != null) {
      int[] __textures = new int[_o.getTextures().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.TextureT _e : _o.getTextures()) { __textures[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.Texture.pack(builder, _e); _j++;}
      _textures = createTexturesVector(builder, __textures);
    }
    int _samplers = 0;
    if (_o.getSamplers() != null) {
      int[] __samplers = new int[_o.getSamplers().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.SamplerStateT _e : _o.getSamplers()) { __samplers[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.SamplerState.pack(builder, _e); _j++;}
      _samplers = createSamplersVector(builder, __samplers);
    }
    int _floatParameter = 0;
    if (_o.getFloatParameter() != null) {
      int[] __floatParameter = new int[_o.getFloatParameter().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameterT _e : _o.getFloatParameter()) { __floatParameter[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.FloatParameter.pack(builder, _e); _j++;}
      _floatParameter = createFloatParameterVector(builder, __floatParameter);
    }
    int _unk5 = _o.getUnk5() == null ? 0 : builder.createString(_o.getUnk5());
    int _float4LightParameter = 0;
    if (_o.getFloat4LightParameter() != null) {
      int[] __float4LightParameter = new int[_o.getFloat4LightParameter().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.Float4ParameterT _e : _o.getFloat4LightParameter()) { __float4LightParameter[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.pack(builder, _e); _j++;}
      _float4LightParameter = createFloat4LightParameterVector(builder, __float4LightParameter);
    }
    int _float4Parameter = 0;
    if (_o.getFloat4Parameter() != null) {
      int[] __float4Parameter = new int[_o.getFloat4Parameter().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.Float4ParameterT _e : _o.getFloat4Parameter()) { __float4Parameter[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.Float4Parameter.pack(builder, _e); _j++;}
      _float4Parameter = createFloat4ParameterVector(builder, __float4Parameter);
    }
    int _unk8 = _o.getUnk8() == null ? 0 : builder.createString(_o.getUnk8());
    int _intParameter = 0;
    if (_o.getIntParameter() != null) {
      int[] __intParameter = new int[_o.getIntParameter().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.IntParameterT _e : _o.getIntParameter()) { __intParameter[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.IntParameter.pack(builder, _e); _j++;}
      _intParameter = createIntParameterVector(builder, __intParameter);
    }
    int _unk10 = _o.getUnk10() == null ? 0 : builder.createString(_o.getUnk10());
    int _unk11 = _o.getUnk11() == null ? 0 : builder.createString(_o.getUnk11());
    int _unk12 = _o.getUnk12() == null ? 0 : builder.createString(_o.getUnk12());
    int _byteExtra = _o.getByteExtra() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.Model.Byte_Extra.pack(builder, _o.getByteExtra());
    int _intExtra = _o.getIntExtra() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.Model.Int_Extra.pack(builder, _o.getIntExtra());
    int _alphaType = _o.getAlphaType() == null ? 0 : builder.createString(_o.getAlphaType());
    return createMaterial(
      builder,
      _name,
      _shaders,
      _textures,
      _samplers,
      _floatParameter,
      _unk5,
      _float4LightParameter,
      _float4Parameter,
      _unk8,
      _intParameter,
      _unk10,
      _unk11,
      _unk12,
      _byteExtra,
      _intExtra,
      _alphaType);
  }
}

