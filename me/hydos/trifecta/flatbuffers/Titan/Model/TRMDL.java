// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRMDL extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static TRMDL getRootAsTRMDL(ByteBuffer _bb) { return getRootAsTRMDL(_bb, new TRMDL()); }
  public static TRMDL getRootAsTRMDL(ByteBuffer _bb, TRMDL obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRMDL __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long unk0() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes meshes(int j) { return meshes(new me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes meshes(me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int meshesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes.Vector meshesVector() { return meshesVector(new me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes.Vector meshesVector(me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.trskeleton skeleton() { return skeleton(new me.hydos.trifecta.flatbuffers.Titan.Model.trskeleton()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.trskeleton skeleton(me.hydos.trifecta.flatbuffers.Titan.Model.trskeleton obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String materials(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int materialsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector materialsVector() { return materialsVector(new StringVector()); }
  public StringVector materialsVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Lod lods(int j) { return lods(new me.hydos.trifecta.flatbuffers.Titan.Model.Lod(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Lod lods(me.hydos.trifecta.flatbuffers.Titan.Model.Lod obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int lodsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Lod.Vector lodsVector() { return lodsVector(new me.hydos.trifecta.flatbuffers.Titan.Model.Lod.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Lod.Vector lodsVector(me.hydos.trifecta.flatbuffers.Titan.Model.Lod.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Bounds bounds() { return bounds(new me.hydos.trifecta.flatbuffers.Titan.Model.Bounds()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Bounds bounds(me.hydos.trifecta.flatbuffers.Titan.Model.Bounds obj) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Vec4 unkVec() { return unkVec(new me.hydos.trifecta.flatbuffers.Titan.Model.Vec4()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.Vec4 unkVec(me.hydos.trifecta.flatbuffers.Titan.Model.Vec4 obj) { int o = __offset(16); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public long unk7() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long unk8() { int o = __offset(20); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long unk9() { int o = __offset(22); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static void startTRMDL(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addUnk0(FlatBufferBuilder builder, long unk0) { builder.addInt(0, (int) unk0, (int) 0L); }
  public static void addMeshes(FlatBufferBuilder builder, int meshesOffset) { builder.addOffset(1, meshesOffset, 0); }
  public static int createMeshesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMeshesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSkeleton(FlatBufferBuilder builder, int skeletonOffset) { builder.addOffset(2, skeletonOffset, 0); }
  public static void addMaterials(FlatBufferBuilder builder, int materialsOffset) { builder.addOffset(3, materialsOffset, 0); }
  public static int createMaterialsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMaterialsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLods(FlatBufferBuilder builder, int lodsOffset) { builder.addOffset(4, lodsOffset, 0); }
  public static int createLodsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLodsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBounds(FlatBufferBuilder builder, int boundsOffset) { builder.addOffset(5, boundsOffset, 0); }
  public static void addUnkVec(FlatBufferBuilder builder, int unkVecOffset) { builder.addStruct(6, unkVecOffset, 0); }
  public static void addUnk7(FlatBufferBuilder builder, long unk7) { builder.addInt(7, (int) unk7, (int) 0L); }
  public static void addUnk8(FlatBufferBuilder builder, long unk8) { builder.addInt(8, (int) unk8, (int) 0L); }
  public static void addUnk9(FlatBufferBuilder builder, long unk9) { builder.addInt(9, (int) unk9, (int) 0L); }
  public static int endTRMDL(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRMDLBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRMDLBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRMDL get(int j) { return get(new TRMDL(), j); }
    public TRMDL get(TRMDL obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TRMDLT unpack() {
    TRMDLT _o = new TRMDLT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TRMDLT _o) {
    long _oUnk0 = unk0();
    _o.setUnk0(_oUnk0);
    me.hydos.trifecta.flatbuffers.Titan.Model.trmeshesT[] _oMeshes = new me.hydos.trifecta.flatbuffers.Titan.Model.trmeshesT[meshesLength()];
    for (int _j = 0; _j < meshesLength(); ++_j) {_oMeshes[_j] = (meshes(_j) != null ? meshes(_j).unpack() : null);}
    _o.setMeshes(_oMeshes);
    if (skeleton() != null) _o.setSkeleton(skeleton().unpack());
    else _o.setSkeleton(null);
    String[] _oMaterials = new String[materialsLength()];
    for (int _j = 0; _j < materialsLength(); ++_j) {_oMaterials[_j] = materials(_j);}
    _o.setMaterials(_oMaterials);
    me.hydos.trifecta.flatbuffers.Titan.Model.LodT[] _oLods = new me.hydos.trifecta.flatbuffers.Titan.Model.LodT[lodsLength()];
    for (int _j = 0; _j < lodsLength(); ++_j) {_oLods[_j] = (lods(_j) != null ? lods(_j).unpack() : null);}
    _o.setLods(_oLods);
    if (bounds() != null) _o.setBounds(bounds().unpack());
    else _o.setBounds(null);
    if (unkVec() != null) unkVec().unpackTo(_o.getUnkVec());
    else _o.setUnkVec(null);
    long _oUnk7 = unk7();
    _o.setUnk7(_oUnk7);
    long _oUnk8 = unk8();
    _o.setUnk8(_oUnk8);
    long _oUnk9 = unk9();
    _o.setUnk9(_oUnk9);
  }
  public static int pack(FlatBufferBuilder builder, TRMDLT _o) {
    if (_o == null) return 0;
    int _meshes = 0;
    if (_o.getMeshes() != null) {
      int[] __meshes = new int[_o.getMeshes().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.trmeshesT _e : _o.getMeshes()) { __meshes[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.trmeshes.pack(builder, _e); _j++;}
      _meshes = createMeshesVector(builder, __meshes);
    }
    int _skeleton = _o.getSkeleton() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.Model.trskeleton.pack(builder, _o.getSkeleton());
    int _materials = 0;
    if (_o.getMaterials() != null) {
      int[] __materials = new int[_o.getMaterials().length];
      int _j = 0;
      for (String _e : _o.getMaterials()) { __materials[_j] = builder.createString(_e); _j++;}
      _materials = createMaterialsVector(builder, __materials);
    }
    int _lods = 0;
    if (_o.getLods() != null) {
      int[] __lods = new int[_o.getLods().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.LodT _e : _o.getLods()) { __lods[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.Lod.pack(builder, _e); _j++;}
      _lods = createLodsVector(builder, __lods);
    }
    int _bounds = _o.getBounds() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.Model.Bounds.pack(builder, _o.getBounds());
    startTRMDL(builder);
    addUnk0(builder, _o.getUnk0());
    addMeshes(builder, _meshes);
    addSkeleton(builder, _skeleton);
    addMaterials(builder, _materials);
    addLods(builder, _lods);
    addBounds(builder, _bounds);
    addUnkVec(builder, me.hydos.trifecta.flatbuffers.Titan.Model.Vec4.pack(builder, _o.getUnkVec()));
    addUnk7(builder, _o.getUnk7());
    addUnk8(builder, _o.getUnk8());
    addUnk9(builder, _o.getUnk9());
    return endTRMDL(builder);
  }
}

