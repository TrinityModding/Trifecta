// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class trinity_ScenePoint extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static trinity_ScenePoint getRootAstrinity_ScenePoint(ByteBuffer _bb) { return getRootAstrinity_ScenePoint(_bb, new trinity_ScenePoint()); }
  public static trinity_ScenePoint getRootAstrinity_ScenePoint(ByteBuffer _bb, trinity_ScenePoint obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public trinity_ScenePoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String pointName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pointNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer pointNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public me.hydos.trifecta.flatbuffers.Vec3f pointLocation() { return pointLocation(new me.hydos.trifecta.flatbuffers.Vec3f()); }
  public me.hydos.trifecta.flatbuffers.Vec3f pointLocation(me.hydos.trifecta.flatbuffers.Vec3f obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public int pointUnk() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static void starttrinity_ScenePoint(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addPointName(FlatBufferBuilder builder, int pointNameOffset) { builder.addOffset(0, pointNameOffset, 0); }
  public static void addPointLocation(FlatBufferBuilder builder, int pointLocationOffset) { builder.addStruct(1, pointLocationOffset, 0); }
  public static void addPointUnk(FlatBufferBuilder builder, int pointUnk) { builder.addByte(2, (byte) pointUnk, (byte) 0); }
  public static int endtrinity_ScenePoint(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishtrinity_ScenePointBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedtrinity_ScenePointBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public trinity_ScenePoint get(int j) { return get(new trinity_ScenePoint(), j); }
    public trinity_ScenePoint get(trinity_ScenePoint obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public trinity_ScenePointT unpack() {
    trinity_ScenePointT _o = new trinity_ScenePointT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(trinity_ScenePointT _o) {
    String _oPointName = pointName();
    _o.setPointName(_oPointName);
    if (pointLocation() != null) pointLocation().unpackTo(_o.getPointLocation());
    else _o.setPointLocation(null);
    int _oPointUnk = pointUnk();
    _o.setPointUnk(_oPointUnk);
  }
  public static int pack(FlatBufferBuilder builder, trinity_ScenePointT _o) {
    if (_o == null) return 0;
    int _pointName = _o.getPointName() == null ? 0 : builder.createString(_o.getPointName());
    starttrinity_ScenePoint(builder);
    addPointName(builder, _pointName);
    addPointLocation(builder, me.hydos.trifecta.flatbuffers.Vec3f.pack(builder, _o.getPointLocation()));
    addPointUnk(builder, _o.getPointUnk());
    return endtrinity_ScenePoint(builder);
  }
}

