// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class TRMSHT {
  private long unk0;
  private me.hydos.trifecta.flatbuffers.Titan.Model.MeshShapeT[] meshes;
  private String bufferName;

  public long getUnk0() { return unk0; }

  public void setUnk0(long unk0) { this.unk0 = unk0; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.MeshShapeT[] getMeshes() { return meshes; }

  public void setMeshes(me.hydos.trifecta.flatbuffers.Titan.Model.MeshShapeT[] meshes) { this.meshes = meshes; }

  public String getBufferName() { return bufferName; }

  public void setBufferName(String bufferName) { this.bufferName = bufferName; }


  public TRMSHT() {
    this.unk0 = 0L;
    this.meshes = null;
    this.bufferName = null;
  }
  public static TRMSHT deserializeFromBinary(byte[] fbBuffer) {
    return TRMSH.getRootAsTRMSH(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    TRMSH.finishTRMSHBuffer(fbb, TRMSH.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

