// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Morphs extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Morphs getRootAsMorphs(ByteBuffer _bb) { return getRootAsMorphs(_bb, new Morphs()); }
  public static Morphs getRootAsMorphs(ByteBuffer _bb, Morphs obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Morphs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer morphBuffer(int j) { return morphBuffer(new me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer(), j); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer morphBuffer(me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int morphBufferLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer.Vector morphBufferVector() { return morphBufferVector(new me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer.Vector()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer.Vector morphBufferVector(me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createMorphs(FlatBufferBuilder builder,
      int morphBufferOffset) {
    builder.startTable(1);
    Morphs.addMorphBuffer(builder, morphBufferOffset);
    return Morphs.endMorphs(builder);
  }

  public static void startMorphs(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addMorphBuffer(FlatBufferBuilder builder, int morphBufferOffset) { builder.addOffset(0, morphBufferOffset, 0); }
  public static int createMorphBufferVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMorphBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMorphs(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Morphs get(int j) { return get(new Morphs(), j); }
    public Morphs get(Morphs obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MorphsT unpack() {
    MorphsT _o = new MorphsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MorphsT _o) {
    me.hydos.trifecta.flatbuffers.Titan.Model.MorphBufferT[] _oMorphBuffer = new me.hydos.trifecta.flatbuffers.Titan.Model.MorphBufferT[morphBufferLength()];
    for (int _j = 0; _j < morphBufferLength(); ++_j) {_oMorphBuffer[_j] = (morphBuffer(_j) != null ? morphBuffer(_j).unpack() : null);}
    _o.setMorphBuffer(_oMorphBuffer);
  }
  public static int pack(FlatBufferBuilder builder, MorphsT _o) {
    if (_o == null) return 0;
    int _morphBuffer = 0;
    if (_o.getMorphBuffer() != null) {
      int[] __morphBuffer = new int[_o.getMorphBuffer().length];
      int _j = 0;
      for (me.hydos.trifecta.flatbuffers.Titan.Model.MorphBufferT _e : _o.getMorphBuffer()) { __morphBuffer[_j] = me.hydos.trifecta.flatbuffers.Titan.Model.MorphBuffer.pack(builder, _e); _j++;}
      _morphBuffer = createMorphBufferVector(builder, __morphBuffer);
    }
    return createMorphs(
      builder,
      _morphBuffer);
  }
}

