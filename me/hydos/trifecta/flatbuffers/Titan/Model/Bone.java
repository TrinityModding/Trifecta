// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Bone extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Bone getRootAsBone(ByteBuffer _bb) { return getRootAsBone(_bb, new Bone()); }
  public static Bone getRootAsBone(ByteBuffer _bb, Bone obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Bone __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int inheritPosition() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int unkBool2() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public me.hydos.trifecta.flatbuffers.Titan.Model.BoneMatrix matrix() { return matrix(new me.hydos.trifecta.flatbuffers.Titan.Model.BoneMatrix()); }
  public me.hydos.trifecta.flatbuffers.Titan.Model.BoneMatrix matrix(me.hydos.trifecta.flatbuffers.Titan.Model.BoneMatrix obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createBone(FlatBufferBuilder builder,
      int inheritPosition,
      int unkBool2,
      int matrixOffset) {
    builder.startTable(3);
    Bone.addMatrix(builder, matrixOffset);
    Bone.addUnkBool2(builder, unkBool2);
    Bone.addInheritPosition(builder, inheritPosition);
    return Bone.endBone(builder);
  }

  public static void startBone(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addInheritPosition(FlatBufferBuilder builder, int inheritPosition) { builder.addByte(0, (byte) inheritPosition, (byte) 0); }
  public static void addUnkBool2(FlatBufferBuilder builder, int unkBool2) { builder.addByte(1, (byte) unkBool2, (byte) 0); }
  public static void addMatrix(FlatBufferBuilder builder, int matrixOffset) { builder.addOffset(2, matrixOffset, 0); }
  public static int endBone(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Bone get(int j) { return get(new Bone(), j); }
    public Bone get(Bone obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public BoneT unpack() {
    BoneT _o = new BoneT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(BoneT _o) {
    int _oInheritPosition = inheritPosition();
    _o.setInheritPosition(_oInheritPosition);
    int _oUnkBool2 = unkBool2();
    _o.setUnkBool2(_oUnkBool2);
    if (matrix() != null) _o.setMatrix(matrix().unpack());
    else _o.setMatrix(null);
  }
  public static int pack(FlatBufferBuilder builder, BoneT _o) {
    if (_o == null) return 0;
    int _matrix = _o.getMatrix() == null ? 0 : me.hydos.trifecta.flatbuffers.Titan.Model.BoneMatrix.pack(builder, _o.getMatrix());
    return createBone(
      builder,
      _o.getInheritPosition(),
      _o.getUnkBool2(),
      _matrix);
  }
}

