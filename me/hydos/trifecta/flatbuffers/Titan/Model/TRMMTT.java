// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class TRMMTT {
  private long res0;
  private long res1;
  private me.hydos.trifecta.flatbuffers.Titan.Model.MMTT[] material;

  public long getRes0() { return res0; }

  public void setRes0(long res0) { this.res0 = res0; }

  public long getRes1() { return res1; }

  public void setRes1(long res1) { this.res1 = res1; }

  public me.hydos.trifecta.flatbuffers.Titan.Model.MMTT[] getMaterial() { return material; }

  public void setMaterial(me.hydos.trifecta.flatbuffers.Titan.Model.MMTT[] material) { this.material = material; }


  public TRMMTT() {
    this.res0 = 0L;
    this.res1 = 0L;
    this.material = null;
  }
  public static TRMMTT deserializeFromBinary(byte[] fbBuffer) {
    return TRMMT.getRootAsTRMMT(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    TRMMT.finishTRMMTBuffer(fbb, TRMMT.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

