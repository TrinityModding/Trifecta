// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.Model;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Vec3i extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Vec3i __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int x() { return bb.getInt(bb_pos + 0); }
  public int y() { return bb.getInt(bb_pos + 4); }
  public int z() { return bb.getInt(bb_pos + 8); }

  public static int createVec3i(FlatBufferBuilder builder, int x, int y, int z) {
    builder.prep(4, 12);
    builder.putInt(z);
    builder.putInt(y);
    builder.putInt(x);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Vec3i get(int j) { return get(new Vec3i(), j); }
    public Vec3i get(Vec3i obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public Vec3iT unpack() {
    Vec3iT _o = new Vec3iT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(Vec3iT _o) {
    int _oX = x();
    _o.setX(_oX);
    int _oY = y();
    _o.setY(_oY);
    int _oZ = z();
    _o.setZ(_oZ);
  }
  public static int pack(FlatBufferBuilder builder, Vec3iT _o) {
    if (_o == null) return 0;
    return createVec3i(
      builder,
      _o.getX(),
      _o.getY(),
      _o.getZ());
  }
}

