// automatically generated by the FlatBuffers compiler, do not modify

package me.hydos.trifecta.flatbuffers.Titan.TrinityScene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class pe_AudioPlayerComponent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static pe_AudioPlayerComponent getRootAspe_AudioPlayerComponent(ByteBuffer _bb) { return getRootAspe_AudioPlayerComponent(_bb, new pe_AudioPlayerComponent()); }
  public static pe_AudioPlayerComponent getRootAspe_AudioPlayerComponent(ByteBuffer _bb, pe_AudioPlayerComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public pe_AudioPlayerComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void startpe_AudioPlayerComponent(FlatBufferBuilder builder) { builder.startTable(0); }
  public static int endpe_AudioPlayerComponent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishpe_AudioPlayerComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedpe_AudioPlayerComponentBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public pe_AudioPlayerComponent get(int j) { return get(new pe_AudioPlayerComponent(), j); }
    public pe_AudioPlayerComponent get(pe_AudioPlayerComponent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public pe_AudioPlayerComponentT unpack() {
    pe_AudioPlayerComponentT _o = new pe_AudioPlayerComponentT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(pe_AudioPlayerComponentT _o) {
  }
  public static int pack(FlatBufferBuilder builder, pe_AudioPlayerComponentT _o) {
    if (_o == null) return 0;
    startpe_AudioPlayerComponent(builder);
    return endpe_AudioPlayerComponent(builder);
  }
}

